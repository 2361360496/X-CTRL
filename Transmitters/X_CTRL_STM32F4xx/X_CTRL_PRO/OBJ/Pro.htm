<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Pro.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Pro.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Sep 20 23:55:42 2019
<BR><P>
<H3>Maximum Stack Usage =      43232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
io_readline &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">NMI_Handler</a><BR>
 <LI><a href="#[25]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">MemManage_Handler</a><BR>
 <LI><a href="#[26]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">BusFault_Handler</a><BR>
 <LI><a href="#[27]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">UsageFault_Handler</a><BR>
 <LI><a href="#[29]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">DebugMon_Handler</a><BR>
 <LI><a href="#[3e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1fe]">PWM_Init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ff]">pinMode</a><BR>
 <LI><a href="#[1ff]">pinMode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ff]">pinMode</a><BR>
 <LI><a href="#[4ef]">refresh_children_position</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ef]">refresh_children_position</a><BR>
 <LI><a href="#[4f0]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f0]">refresh_children_style</a><BR>
 <LI><a href="#[360]">lv_event_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[360]">lv_event_send</a><BR>
 <LI><a href="#[253]">lv_ta_add_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d0]">lv_ta_add_char</a><BR>
 <LI><a href="#[441]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fc]">luaS_newlstr</a><BR>
 <LI><a href="#[40e]">luaH_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">luaM_realloc_</a><BR>
 <LI><a href="#[3ff]">luaE_freethread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">luaM_realloc_</a><BR>
 <LI><a href="#[324]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[324]">reallymarkobject</a><BR>
 <LI><a href="#[3f5]">luaF_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">luaM_realloc_</a><BR>
 <LI><a href="#[401]">luaF_freeproto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">luaM_realloc_</a><BR>
 <LI><a href="#[3e2]">sweeplist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">luaM_realloc_</a><BR>
 <LI><a href="#[3e7]">singlestep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[447]">luaS_resize</a><BR>
 <LI><a href="#[3e5]">luaD_pcall</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fc]">luaS_newlstr</a><BR>
 <LI><a href="#[3f7]">luaE_shrinkCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">luaM_realloc_</a><BR>
 <LI><a href="#[3f6]">luaE_freeCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f9]">luaM_realloc_</a><BR>
 <LI><a href="#[3f1]">luaD_reallocstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">luaM_toobig</a><BR>
 <LI><a href="#[1f3]">luaO_pushfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40b]">luaO_pushvfstring</a><BR>
 <LI><a href="#[1f4]">luaD_throw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fc]">luaS_newlstr</a><BR>
 <LI><a href="#[40c]">luaG_tointerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[3a4]">getobjname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a4]">getobjname</a><BR>
 <LI><a href="#[408]">luaG_opinterror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[405]">luaG_concaterror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[40a]">luaG_ordererror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[44d]">luaT_callorderTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44b]">luaT_callbinTM</a><BR>
 <LI><a href="#[44a]">luaT_callTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[367]">luaD_callnoyield</a><BR>
 <LI><a href="#[3ed]">luaD_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f0]">luaV_execute</a><BR>
 <LI><a href="#[3aa]">luaD_growstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[3f9]">luaG_typeerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[450]">luaV_finishset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[2f1]">luaH_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[413]">luaH_newkey</a><BR>
 <LI><a href="#[374]">luaH_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">luaM_toobig</a><BR>
 <LI><a href="#[413]">luaH_newkey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[44f]">luaV_finishget</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[3f0]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[441]">luaV_concat</a><BR>
 <LI><a href="#[367]">luaD_callnoyield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">luaG_runerror</a><BR>
 <LI><a href="#[40b]">luaO_pushvfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fc]">luaS_newlstr</a><BR>
 <LI><a href="#[438]">resizebox</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[438]">resizebox</a><BR>
 <LI><a href="#[504]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[504]">lv_refr_obj</a><BR>
 <LI><a href="#[502]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[502]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[3ae]">indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ae]">indev_search_obj</a><BR>
 <LI><a href="#[35e]">delete_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35e]">delete_children</a><BR>
 <LI><a href="#[383]">findfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[383]">findfield</a><BR>
 <LI><a href="#[36a]">save</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36c]">lexerror</a><BR>
 <LI><a href="#[530]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[530]">singlevaraux</a><BR>
 <LI><a href="#[332]">expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[370]">subexpr</a><BR>
 <LI><a href="#[2fd]">explist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[370]">subexpr</a><BR>
 <LI><a href="#[370]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[370]">subexpr</a><BR>
 <LI><a href="#[311]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[314]">statlist</a><BR>
 <LI><a href="#[532]">test_then_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[314]">statlist</a><BR>
 <LI><a href="#[531]">statement</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[314]">statlist</a><BR>
 <LI><a href="#[38e]">forbody</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[314]">statlist</a><BR>
 <LI><a href="#[2f9]">assignment</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f9]">assignment</a><BR>
 <LI><a href="#[1fa]">LoadProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">LoadFunction</a><BR>
 <LI><a href="#[511]">max_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a8]">match</a><BR>
 <LI><a href="#[3a8]">match</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a8]">match</a><BR>
 <LI><a href="#[1e5]">DumpProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e3]">DumpFunction</a><BR>
 <LI><a href="#[307]">auxsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[307]">auxsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3e]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">BusFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6c]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6d]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6e]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6b]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7b]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7a]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">DebugMon_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[69]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6a]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">EXTI1_IRQHandler</a> from exti.o(i.EXTI1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">EXTI2_IRQHandler</a> from exti.o(i.EXTI2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7d]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7c]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">HardFault_Handler</a> from displaybasic.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[75]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[74]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">MemManage_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">NMI_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6f]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[77]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[76]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[79]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[78]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7f]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[2e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">TIM1_UP_TIM10_IRQHandler</a> from timer.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">TIM7_IRQHandler</a> from timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">TIM8_UP_TIM13_IRQHandler</a> from timer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">USART1_IRQHandler</a> from hardwareserial.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">USART2_IRQHandler</a> from hardwareserial.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">USART3_IRQHandler</a> from hardwareserial.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[73]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">UsageFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a6]">GT911_Scan()</a> from gt911.o(i._Z10GT911_Scanv) referenced from touch.o(i._Z7TP_Initv)
 <LI><a href="#[8b]">Lua_micros(lua_State*)</a> from luatime.o(i._Z10Lua_microsP9lua_State) referenced from luatime.o(i._Z11LuaReg_Timev)
 <LI><a href="#[8a]">Lua_millis(lua_State*)</a> from luatime.o(i._Z10Lua_millisP9lua_State) referenced from luatime.o(i._Z11LuaReg_Timev)
 <LI><a href="#[84]">Lua_pinMode(lua_State*)</a> from luagpio.o(i._Z11Lua_pinModeP9lua_State) referenced from luagpio.o(i._Z11LuaReg_GPIOv)
 <LI><a href="#[9c]">fs_dir_open(_lv_fs_drv_t*, void*, const char*)</a> from lv_user_fs.o(i._Z11fs_dir_openP12_lv_fs_drv_tPvPKc) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[9d]">fs_dir_read(_lv_fs_drv_t*, void*, char*)</a> from lv_user_fs.o(i._Z11fs_dir_readP12_lv_fs_drv_tPvPc) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[a4]">Task_Dispaly(void*)</a> from displaybasic.o(i._Z12Task_DispalyPv) referenced from main.o(i._Z5setupv)
 <LI><a href="#[a4]">Task_Dispaly(void*)</a> from displaybasic.o(i._Z12Task_DispalyPv) referenced from main.o(i.main)
 <LI><a href="#[9b]">fs_dir_close(_lv_fs_drv_t*, void*)</a> from lv_user_fs.o(i._Z12fs_dir_closeP12_lv_fs_drv_tPv) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[85]">Lua_togglePin(lua_State*)</a> from luagpio.o(i._Z13Lua_togglePinP9lua_State) referenced from luagpio.o(i._Z11LuaReg_GPIOv)
 <LI><a href="#[a7]">breakCallback(lua_State*, lua_Debug*)</a> from luascript.o(i._Z13breakCallbackP9lua_StateP9lua_Debug) referenced from luascript.o(i._ZN9LuaScript3endEv)
 <LI><a href="#[a7]">breakCallback(lua_State*, lua_Debug*)</a> from luascript.o(i._Z13breakCallbackP9lua_StateP9lua_Debug) referenced from luascript.o(i._ZN9LuaScriptD1Ev)
 <LI><a href="#[8d]">my_disp_flush(_disp_drv_t*, const lv_area_t*, lv_color16_t*)</a> from lv_user.o(i._Z13my_disp_flushP11_disp_drv_tPK9lv_area_tP12lv_color16_t) referenced from lv_user.o(i._Z12lv_user_initv)
 <LI><a href="#[89]">Lua_analogRead(lua_State*)</a> from luagpio.o(i._Z14Lua_analogReadP9lua_State) referenced from luagpio.o(i._Z11LuaReg_GPIOv)
 <LI><a href="#[a5]">Task_LuaScript(void*)</a> from luabasic.o(i._Z14Task_LuaScriptPv) referenced from main.o(i._Z5setupv)
 <LI><a href="#[a5]">Task_LuaScript(void*)</a> from luabasic.o(i._Z14Task_LuaScriptPv) referenced from main.o(i.main)
 <LI><a href="#[88]">Lua_analogWrite(lua_State*)</a> from luagpio.o(i._Z15Lua_analogWriteP9lua_State) referenced from luagpio.o(i._Z11LuaReg_GPIOv)
 <LI><a href="#[87]">Lua_digitalRead(lua_State*)</a> from luagpio.o(i._Z15Lua_digitalReadP9lua_State) referenced from luagpio.o(i._Z11LuaReg_GPIOv)
 <LI><a href="#[9e]">LuaPrintCallback(const char*)</a> from page_luascript.o(i._Z16LuaPrintCallbackPKc) referenced from page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
 <LI><a href="#[86]">Lua_digitalWrite(lua_State*)</a> from luagpio.o(i._Z16Lua_digitalWriteP9lua_State) referenced from luagpio.o(i._Z11LuaReg_GPIOv)
 <LI><a href="#[a1]">kb_hide_anim_end(_lv_anim_t*)</a> from page_luascript.o(i._Z16kb_hide_anim_endP10_lv_anim_t) referenced from page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
 <LI><a href="#[8e]">my_touchpad_read(_lv_indev_drv_t*, lv_indev_data_t*)</a> from lv_user.o(i._Z16my_touchpad_readP15_lv_indev_drv_tP15lv_indev_data_t) referenced from lv_user.o(i._Z12lv_user_initv)
 <LI><a href="#[a3]">keyboard_event_cb(_lv_obj_t*, unsigned char)</a> from page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th) referenced from page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th)
 <LI><a href="#[a2]">text_area_event_handler(_lv_obj_t*, unsigned char)</a> from page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th) referenced from page_luascript.o(i._Z19PageCreat_LuaScriptv)
 <LI><a href="#[1d]">TP_Init()</a> from touch.o(i._Z7TP_Initv) referenced 2 times from touch.o(.data)
 <LI><a href="#[96]">fs_free(_lv_fs_drv_t*, unsigned*, unsigned*)</a> from lv_user_fs.o(i._Z7fs_freeP12_lv_fs_drv_tPjS1_) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[90]">fs_open(_lv_fs_drv_t*, void*, const char*, unsigned char)</a> from lv_user_fs.o(i._Z7fs_openP12_lv_fs_drv_tPvPKch) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[92]">fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*)</a> from lv_user_fs.o(i._Z7fs_readP12_lv_fs_drv_tPvS1_jPj) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[94]">fs_seek(_lv_fs_drv_t*, void*, unsigned)</a> from lv_user_fs.o(i._Z7fs_seekP12_lv_fs_drv_tPvj) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[97]">fs_size(_lv_fs_drv_t*, void*, unsigned*)</a> from lv_user_fs.o(i._Z7fs_sizeP12_lv_fs_drv_tPvPj) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[95]">fs_tell(_lv_fs_drv_t*, void*, unsigned*)</a> from lv_user_fs.o(i._Z7fs_tellP12_lv_fs_drv_tPvPj) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[91]">fs_close(_lv_fs_drv_t*, void*)</a> from lv_user_fs.o(i._Z8fs_closeP12_lv_fs_drv_tPv) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[8f]">fs_ready(_lv_fs_drv_t*)</a> from lv_user_fs.o(i._Z8fs_readyP12_lv_fs_drv_t) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[9a]">fs_trunc(_lv_fs_drv_t*, void*)</a> from lv_user_fs.o(i._Z8fs_truncP12_lv_fs_drv_tPv) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[93]">fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*)</a> from lv_user_fs.o(i._Z8fs_writeP12_lv_fs_drv_tPvPKvjPj) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[8c]">Lua_delay(lua_State*)</a> from luatime.o(i._Z9Lua_delayP9lua_State) referenced from luatime.o(i._Z11LuaReg_Timev)
 <LI><a href="#[98]">fs_remove(_lv_fs_drv_t*, const char*)</a> from lv_user_fs.o(i._Z9fs_removeP12_lv_fs_drv_tPKc) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[99]">fs_rename(_lv_fs_drv_t*, const char*, const char*)</a> from lv_user_fs.o(i._Z9fs_renameP12_lv_fs_drv_tPKcS2_) referenced from lv_user_fs.o(i._Z15lv_user_fs_initv)
 <LI><a href="#[194]">TFT_ILI9488::fillScreen(unsigned short)</a> from tft_ili9488.o(i._ZN11TFT_ILI948810fillScreenEt) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[191]">TFT_ILI9488::setRotation(unsigned char)</a> from tft_ili9488.o(i._ZN11TFT_ILI948811setRotationEh) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[192]">TFT_ILI9488::drawFastVLine(short, short, short, unsigned short)</a> from tft_ili9488.o(i._ZN11TFT_ILI948813drawFastVLineEssst) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[195]">TFT_ILI9488::setAddrWindow(short, short, short, short)</a> from tft_ili9488.o(i._ZN11TFT_ILI948813setAddrWindowEssss) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[18a]">TFT_ILI9488::drawPixel(short, short, unsigned short)</a> from tft_ili9488.o(i._ZN11TFT_ILI94889drawPixelEsst) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[196]">TFT_ILI9488::setCursor(short, short)</a> from tft_ili9488.o(i._ZN11TFT_ILI94889setCursorEss) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[18b]">Adafruit_GFX::startWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[18b]">Adafruit_GFX::startWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[18c]">Adafruit_GFX::writePixel(short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[18c]">Adafruit_GFX::writePixel(short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[198]">Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[18d]">Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[18d]">Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[18e]">Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[18e]">Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[188]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[188]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[190]">Adafruit_GFX::endWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[190]">Adafruit_GFX::endWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[193]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[193]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[18f]">Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[18f]">Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[199]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[189]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
 <LI><a href="#[189]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[189]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[189]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[189]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from displaybasic.o(.constdata__ZTV6SdFile)
 <LI><a href="#[ac]">TwoWire::~TwoWire()</a> from wire.o(i._ZN7TwoWireD1Ev) referenced from wire.o(i.__sti___8_Wire_cpp_928ee5ff)
 <LI><a href="#[ab]">LuaScript::~LuaScript()</a> from luascript.o(i._ZN9LuaScriptD1Ev) referenced from luascript.o(i.__sti___13_LuaScript_cpp_c2241cb2)
 <LI><a href="#[19a]">PrintFile::write(unsigned char)</a> from displaybasic.o(i._ZN9PrintFile5writeEh) referenced from displaybasic.o(.constdata__ZTV6SdFile)
 <LI><a href="#[19c]">SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)</a> from sdspicard.o(i._ZN9SdSpiCard10readBlocksEjPhj) referenced from sdspicard.o(.constdata__ZTV9SdSpiCard)
 <LI><a href="#[19d]">SdSpiCard::syncBlocks()</a> from sdspicard.o(i._ZN9SdSpiCard10syncBlocksEv) referenced from sdspicard.o(.constdata__ZTV9SdSpiCard)
 <LI><a href="#[19e]">SdSpiCard::writeBlock(unsigned, const unsigned char*)</a> from sdspicard.o(i._ZN9SdSpiCard10writeBlockEjPKh) referenced from sdspicard.o(.constdata__ZTV9SdSpiCard)
 <LI><a href="#[19f]">SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)</a> from sdspicard.o(i._ZN9SdSpiCard11writeBlocksEjPKhj) referenced from sdspicard.o(.constdata__ZTV9SdSpiCard)
 <LI><a href="#[19b]">SdSpiCard::readBlock(unsigned, unsigned char*)</a> from sdspicard.o(i._ZN9SdSpiCard9readBlockEjPh) referenced from sdspicard.o(.constdata__ZTV9SdSpiCard)
 <LI><a href="#[197]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[197]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[80]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[1a3]">__sti___12_ComBasic_cpp_nrf</a> from combasic.o(i.__sti___12_ComBasic_cpp_nrf) referenced from combasic.o(.init_array)
 <LI><a href="#[1a6]">__sti___13_LuaScript_cpp_c2241cb2</a> from luascript.o(i.__sti___13_LuaScript_cpp_c2241cb2) referenced from luascript.o(.init_array)
 <LI><a href="#[1a5]">__sti___14_lv_user_fs_cpp_5975bf6a</a> from lv_user_fs.o(i.__sti___14_lv_user_fs_cpp_5975bf6a) referenced from lv_user_fs.o(.init_array)
 <LI><a href="#[1a4]">__sti___16_DisplayBasic_cpp_screen</a> from displaybasic.o(i.__sti___16_DisplayBasic_cpp_screen) referenced from displaybasic.o(.init_array)
 <LI><a href="#[1a0]">__sti___18_HardwareSerial_cpp_cfa1b6a6</a> from hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[1a2]">__sti___7_SPI_cpp_ce5662b4</a> from spi.o(i.__sti___7_SPI_cpp_ce5662b4) referenced from spi.o(.init_array)
 <LI><a href="#[1a1]">__sti___8_Wire_cpp_928ee5ff</a> from wire.o(i.__sti___8_Wire_cpp_928ee5ff) referenced from wire.o(.init_array)
 <LI><a href="#[82]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[81]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[a9]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[a9]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[aa]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[c8]">anim_task</a> from lv_anim.o(i.anim_task) referenced from lv_anim.o(i.lv_anim_core_init)
 <LI><a href="#[c1]">boxgc</a> from lauxlib.o(i.boxgc) referenced from lauxlib.o(i.luaL_prepbuffsize)
 <LI><a href="#[183]">byteoffset</a> from lutf8lib.o(i.byteoffset) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[184]">codepoint</a> from lutf8lib.o(i.codepoint) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[ef]">cursor_blink_anim</a> from lv_ta.o(i.cursor_blink_anim) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[ef]">cursor_blink_anim</a> from lv_ta.o(i.cursor_blink_anim) referenced from lv_ta.o(i.lv_ta_set_cursor_pos)
 <LI><a href="#[115]">db_debug</a> from ldblib.o(i.db_debug) referenced from ldblib.o(.constdata)
 <LI><a href="#[117]">db_gethook</a> from ldblib.o(i.db_gethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[118]">db_getinfo</a> from ldblib.o(i.db_getinfo) referenced from ldblib.o(.constdata)
 <LI><a href="#[119]">db_getlocal</a> from ldblib.o(i.db_getlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[11b]">db_getmetatable</a> from ldblib.o(i.db_getmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[11a]">db_getregistry</a> from ldblib.o(i.db_getregistry) referenced from ldblib.o(.constdata)
 <LI><a href="#[11c]">db_getupvalue</a> from ldblib.o(i.db_getupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[116]">db_getuservalue</a> from ldblib.o(i.db_getuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[120]">db_sethook</a> from ldblib.o(i.db_sethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[121]">db_setlocal</a> from ldblib.o(i.db_setlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[122]">db_setmetatable</a> from ldblib.o(i.db_setmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[123]">db_setupvalue</a> from ldblib.o(i.db_setupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[11f]">db_setuservalue</a> from ldblib.o(i.db_setuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[124]">db_traceback</a> from ldblib.o(i.db_traceback) referenced from ldblib.o(.constdata)
 <LI><a href="#[11e]">db_upvalueid</a> from ldblib.o(i.db_upvalueid) referenced from ldblib.o(.constdata)
 <LI><a href="#[11d]">db_upvaluejoin</a> from ldblib.o(i.db_upvaluejoin) referenced from ldblib.o(.constdata)
 <LI><a href="#[b6]">dofilecont</a> from lbaselib.o(i.dofilecont) referenced from lbaselib.o(i.luaB_dofile)
 <LI><a href="#[bb]">dothecall</a> from lgc.o(i.dothecall) referenced from lgc.o(i.luaC_freeallobjects)
 <LI><a href="#[bb]">dothecall</a> from lgc.o(i.dothecall) referenced from lgc.o(i.runafewfinalizers)
 <LI><a href="#[e6]">edge_flash_anim</a> from lv_page.o(i.edge_flash_anim) referenced from lv_page.o(i.lv_page_start_edge_flash)
 <LI><a href="#[e7]">edge_flash_anim_end</a> from lv_page.o(i.edge_flash_anim_end) referenced from lv_page.o(i.lv_page_start_edge_flash)
 <LI><a href="#[c4]">f_call</a> from lapi.o(i.f_call) referenced from lapi.o(i.lua_pcallk)
 <LI><a href="#[13a]">f_flush</a> from liolib.o(i.f_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[140]">f_gc</a> from liolib.o(i.f_gc) referenced from liolib.o(.constdata)
 <LI><a href="#[13b]">f_lines</a> from liolib.o(i.f_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[c3]">f_luaopen</a> from lstate.o(i.f_luaopen) referenced from lstate.o(i.lua_newstate)
 <LI><a href="#[bc]">f_parser</a> from ldo.o(i.f_parser) referenced from ldo.o(i.luaD_protectedparser)
 <LI><a href="#[13c]">f_read</a> from liolib.o(i.f_read) referenced from liolib.o(.constdata)
 <LI><a href="#[13d]">f_seek</a> from liolib.o(i.f_seek) referenced from liolib.o(.constdata)
 <LI><a href="#[13e]">f_setvbuf</a> from liolib.o(i.f_setvbuf) referenced from liolib.o(.constdata)
 <LI><a href="#[141]">f_tostring</a> from liolib.o(i.f_tostring) referenced from liolib.o(.constdata)
 <LI><a href="#[13f]">f_write</a> from liolib.o(i.f_write) referenced from liolib.o(.constdata)
 <LI><a href="#[ba]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_pcall)
 <LI><a href="#[ba]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_xpcall)
 <LI><a href="#[a8]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[c7]">gctm</a> from loadlib.o(i.gctm) referenced from loadlib.o(i.luaopen_package)
 <LI><a href="#[b8]">generic_reader</a> from lbaselib.o(i.generic_reader) referenced from lbaselib.o(i.luaB_load)
 <LI><a href="#[be]">getF</a> from lauxlib.o(i.getF) referenced from lauxlib.o(i.luaL_loadfilex)
 <LI><a href="#[bd]">getS</a> from lauxlib.o(i.getS) referenced from lauxlib.o(i.luaL_loadbufferx)
 <LI><a href="#[bd]">getS</a> from lauxlib.o(i.getS) referenced from lauxlib.o(i.luaL_loadstring)
 <LI><a href="#[170]">gmatch</a> from lstrlib.o(i.gmatch) referenced from lstrlib.o(.constdata)
 <LI><a href="#[b0]">gmatch_aux</a> from lstrlib.o(i.gmatch_aux) referenced from lstrlib.o(i.gmatch)
 <LI><a href="#[c2]">growstack</a> from lapi.o(i.growstack) referenced from lapi.o(i.lua_checkstack)
 <LI><a href="#[ad]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_gethook)
 <LI><a href="#[ad]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_sethook)
 <LI><a href="#[12f]">io_close</a> from liolib.o(i.io_close) referenced 2 times from liolib.o(.constdata)
 <LI><a href="#[b1]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.io_input)
 <LI><a href="#[b1]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.io_lines)
 <LI><a href="#[b1]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.io_open)
 <LI><a href="#[b1]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.io_output)
 <LI><a href="#[b1]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.io_tmpfile)
 <LI><a href="#[130]">io_flush</a> from liolib.o(i.io_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[131]">io_input</a> from liolib.o(i.io_input) referenced from liolib.o(.constdata)
 <LI><a href="#[132]">io_lines</a> from liolib.o(i.io_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[b2]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.io_noclose)
 <LI><a href="#[b2]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.luaopen_io)
 <LI><a href="#[133]">io_open</a> from liolib.o(i.io_open) referenced from liolib.o(.constdata)
 <LI><a href="#[134]">io_output</a> from liolib.o(i.io_output) referenced from liolib.o(.constdata)
 <LI><a href="#[b3]">io_pclose</a> from liolib.o(i.io_pclose) referenced from liolib.o(i.io_popen)
 <LI><a href="#[135]">io_popen</a> from liolib.o(i.io_popen) referenced from liolib.o(.constdata)
 <LI><a href="#[136]">io_read</a> from liolib.o(i.io_read) referenced from liolib.o(.constdata)
 <LI><a href="#[ae]">io_readline</a> from liolib.o(i.io_readline) referenced from liolib.o(i.f_lines)
 <LI><a href="#[ae]">io_readline</a> from liolib.o(i.io_readline) referenced from liolib.o(i.io_lines)
 <LI><a href="#[137]">io_tmpfile</a> from liolib.o(i.io_tmpfile) referenced from liolib.o(.constdata)
 <LI><a href="#[138]">io_type</a> from liolib.o(i.io_type) referenced from liolib.o(.constdata)
 <LI><a href="#[139]">io_write</a> from liolib.o(i.io_write) referenced from liolib.o(.constdata)
 <LI><a href="#[b7]">ipairsaux</a> from lbaselib.o(i.ipairsaux) referenced from lbaselib.o(i.luaB_ipairs)
 <LI><a href="#[83]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[b4]">iter_aux</a> from lutf8lib.o(i.iter_aux) referenced from lutf8lib.o(i.iter_codes)
 <LI><a href="#[187]">iter_codes</a> from lutf8lib.o(i.iter_codes) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[cd]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(i.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[ce]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(i.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[bf]">l_alloc</a> from lauxlib.o(i.l_alloc) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[159]">ll_loadlib</a> from loadlib.o(i.ll_loadlib) referenced from loadlib.o(.constdata)
 <LI><a href="#[15b]">ll_require</a> from loadlib.o(i.ll_require) referenced from loadlib.o(.constdata)
 <LI><a href="#[15a]">ll_searchpath</a> from loadlib.o(i.ll_searchpath) referenced from loadlib.o(.constdata)
 <LI><a href="#[f9]">luaB_assert</a> from lbaselib.o(i.luaB_assert) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b5]">luaB_auxwrap</a> from lcorolib.o(i.luaB_auxwrap) referenced from lcorolib.o(i.luaB_cowrap)
 <LI><a href="#[10e]">luaB_cocreate</a> from lcorolib.o(i.luaB_cocreate) referenced from lcorolib.o(.constdata)
 <LI><a href="#[fa]">luaB_collectgarbage</a> from lbaselib.o(i.luaB_collectgarbage) referenced from lbaselib.o(.constdata)
 <LI><a href="#[10f]">luaB_coresume</a> from lcorolib.o(i.luaB_coresume) referenced from lcorolib.o(.constdata)
 <LI><a href="#[110]">luaB_corunning</a> from lcorolib.o(i.luaB_corunning) referenced from lcorolib.o(.constdata)
 <LI><a href="#[111]">luaB_costatus</a> from lcorolib.o(i.luaB_costatus) referenced from lcorolib.o(.constdata)
 <LI><a href="#[112]">luaB_cowrap</a> from lcorolib.o(i.luaB_cowrap) referenced from lcorolib.o(.constdata)
 <LI><a href="#[fb]">luaB_dofile</a> from lbaselib.o(i.luaB_dofile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[fc]">luaB_error</a> from lbaselib.o(i.luaB_error) referenced from lbaselib.o(.constdata)
 <LI><a href="#[fd]">luaB_getmetatable</a> from lbaselib.o(i.luaB_getmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[fe]">luaB_ipairs</a> from lbaselib.o(i.luaB_ipairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[100]">luaB_load</a> from lbaselib.o(i.luaB_load) referenced from lbaselib.o(.constdata)
 <LI><a href="#[ff]">luaB_loadfile</a> from lbaselib.o(i.luaB_loadfile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b9]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b9]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(i.luaB_pairs)
 <LI><a href="#[101]">luaB_pairs</a> from lbaselib.o(i.luaB_pairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[102]">luaB_pcall</a> from lbaselib.o(i.luaB_pcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[103]">luaB_print</a> from lbaselib.o(i.luaB_print) referenced from lbaselib.o(.constdata)
 <LI><a href="#[104]">luaB_rawequal</a> from lbaselib.o(i.luaB_rawequal) referenced from lbaselib.o(.constdata)
 <LI><a href="#[106]">luaB_rawget</a> from lbaselib.o(i.luaB_rawget) referenced from lbaselib.o(.constdata)
 <LI><a href="#[105]">luaB_rawlen</a> from lbaselib.o(i.luaB_rawlen) referenced from lbaselib.o(.constdata)
 <LI><a href="#[107]">luaB_rawset</a> from lbaselib.o(i.luaB_rawset) referenced from lbaselib.o(.constdata)
 <LI><a href="#[108]">luaB_select</a> from lbaselib.o(i.luaB_select) referenced from lbaselib.o(.constdata)
 <LI><a href="#[109]">luaB_setmetatable</a> from lbaselib.o(i.luaB_setmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[10a]">luaB_tonumber</a> from lbaselib.o(i.luaB_tonumber) referenced from lbaselib.o(.constdata)
 <LI><a href="#[10b]">luaB_tostring</a> from lbaselib.o(i.luaB_tostring) referenced from lbaselib.o(.constdata)
 <LI><a href="#[10c]">luaB_type</a> from lbaselib.o(i.luaB_type) referenced from lbaselib.o(.constdata)
 <LI><a href="#[10d]">luaB_xpcall</a> from lbaselib.o(i.luaB_xpcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[113]">luaB_yield</a> from lcorolib.o(i.luaB_yield) referenced from lcorolib.o(.constdata)
 <LI><a href="#[114]">luaB_yieldable</a> from lcorolib.o(i.luaB_yieldable) referenced from lcorolib.o(.constdata)
 <LI><a href="#[f4]">lua_newstate</a> from lstate.o(i.lua_newstate) referenced from lstate.o(i.makeseed)
 <LI><a href="#[125]">luaopen_base</a> from lbaselib.o(i.luaopen_base) referenced from linit.o(.constdata)
 <LI><a href="#[127]">luaopen_coroutine</a> from lcorolib.o(i.luaopen_coroutine) referenced from linit.o(.constdata)
 <LI><a href="#[12e]">luaopen_debug</a> from ldblib.o(i.luaopen_debug) referenced from linit.o(.constdata)
 <LI><a href="#[129]">luaopen_io</a> from liolib.o(i.luaopen_io) referenced from linit.o(.constdata)
 <LI><a href="#[12c]">luaopen_math</a> from lmathlib.o(i.luaopen_math) referenced from linit.o(.constdata)
 <LI><a href="#[12a]">luaopen_os</a> from loslib.o(i.luaopen_os) referenced from linit.o(.constdata)
 <LI><a href="#[126]">luaopen_package</a> from loadlib.o(i.luaopen_package) referenced from linit.o(.constdata)
 <LI><a href="#[12b]">luaopen_string</a> from lstrlib.o(i.luaopen_string) referenced from linit.o(.constdata)
 <LI><a href="#[128]">luaopen_table</a> from ltablib.o(i.luaopen_table) referenced from linit.o(.constdata)
 <LI><a href="#[12d]">luaopen_utf8</a> from lutf8lib.o(i.luaopen_utf8) referenced from linit.o(.constdata)
 <LI><a href="#[a0]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
 <LI><a href="#[a0]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th)
 <LI><a href="#[a0]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[a0]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_page.o(i.lv_page_scroll_ver)
 <LI><a href="#[a0]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_page.o(i.lv_page_signal)
 <LI><a href="#[a0]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_page.o(i.lv_page_start_edge_flash)
 <LI><a href="#[a0]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_tabview.o(i.lv_tabview_set_tab_act)
 <LI><a href="#[ea]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_add_char)
 <LI><a href="#[ea]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_add_text)
 <LI><a href="#[ea]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[ea]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_set_cursor_pos)
 <LI><a href="#[ea]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_ta.o(i.lv_ta_set_text)
 <LI><a href="#[ca]">lv_btnm_design</a> from lv_btnm.o(i.lv_btnm_design) referenced from lv_btnm.o(i.lv_btnm_create)
 <LI><a href="#[c9]">lv_btnm_signal</a> from lv_btnm.o(i.lv_btnm_signal) referenced from lv_btnm.o(i.lv_btnm_create)
 <LI><a href="#[cb]">lv_cont_signal</a> from lv_cont.o(i.lv_cont_signal) referenced from lv_cont.o(i.lv_cont_create)
 <LI><a href="#[cc]">lv_disp_refr_task</a> from lv_refr.o(i.lv_disp_refr_task) referenced from lv_hal_disp.o(i.lv_disp_drv_register)
 <LI><a href="#[1f]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt) referenced 2 times from lv_font_roboto_16.o(.data)
 <LI><a href="#[1e]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt) referenced 2 times from lv_font_roboto_16.o(.data)
 <LI><a href="#[d6]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[d3]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[d4]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[d5]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(i.lv_img_decoder_init)
 <LI><a href="#[d7]">lv_indev_read_task</a> from lv_indev.o(i.lv_indev_read_task) referenced from lv_hal_indev.o(i.lv_indev_drv_register)
 <LI><a href="#[d9]">lv_kb_def_event_cb</a> from lv_kb.o(i.lv_kb_def_event_cb) referenced from lv_kb.o(i.lv_kb_create)
 <LI><a href="#[d9]">lv_kb_def_event_cb</a> from lv_kb.o(i.lv_kb_def_event_cb) referenced from lv_kb.o(i.lv_kb_def_event_cb)
 <LI><a href="#[d8]">lv_kb_signal</a> from lv_kb.o(i.lv_kb_signal) referenced from lv_kb.o(i.lv_kb_create)
 <LI><a href="#[da]">lv_label_design</a> from lv_label.o(i.lv_label_design) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[dd]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[dd]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[dd]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[de]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[de]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[de]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[db]">lv_label_signal</a> from lv_label.o(i.lv_label_signal) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[d0]">lv_ll_get_head</a> from lv_ll.o(i.lv_ll_get_head) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[d0]">lv_ll_get_head</a> from lv_ll.o(i.lv_ll_get_head) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[d0]">lv_ll_get_head</a> from lv_ll.o(i.lv_ll_get_head) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[cf]">lv_ll_get_next</a> from lv_ll.o(i.lv_ll_get_next) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[cf]">lv_ll_get_next</a> from lv_ll.o(i.lv_ll_get_next) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[cf]">lv_ll_get_next</a> from lv_ll.o(i.lv_ll_get_next) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[d1]">lv_ll_get_prev</a> from lv_ll.o(i.lv_ll_get_prev) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[d1]">lv_ll_get_prev</a> from lv_ll.o(i.lv_ll_get_prev) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[d1]">lv_ll_get_prev</a> from lv_ll.o(i.lv_ll_get_prev) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[d2]">lv_ll_get_tail</a> from lv_ll.o(i.lv_ll_get_tail) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[d2]">lv_ll_get_tail</a> from lv_ll.o(i.lv_ll_get_tail) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[d2]">lv_ll_get_tail</a> from lv_ll.o(i.lv_ll_get_tail) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[e0]">lv_obj_design</a> from lv_obj.o(i.lv_obj_design) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[dc]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[dc]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[dc]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_page.o(i.lv_page_signal)
 <LI><a href="#[dc]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_tabview.o(i.lv_tabview_set_tab_act)
 <LI><a href="#[9f]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
 <LI><a href="#[9f]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th)
 <LI><a href="#[9f]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[9f]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[9f]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_page.o(i.lv_page_scroll_ver)
 <LI><a href="#[9f]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_tabview.o(i.lv_tabview_set_tab_act)
 <LI><a href="#[df]">lv_obj_signal</a> from lv_obj.o(i.lv_obj_signal) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[e3]">lv_page_design</a> from lv_page.o(i.lv_page_design) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[e1]">lv_page_scrollable_signal</a> from lv_page.o(i.lv_page_scrollable_signal) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[e2]">lv_page_signal</a> from lv_page.o(i.lv_page_signal) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[e4]">lv_scrl_design</a> from lv_page.o(i.lv_scrl_design) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[ed]">lv_ta_design</a> from lv_ta.o(i.lv_ta_design) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[ee]">lv_ta_scrollable_design</a> from lv_ta.o(i.lv_ta_scrollable_design) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[ec]">lv_ta_scrollable_signal</a> from lv_ta.o(i.lv_ta_scrollable_signal) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[eb]">lv_ta_signal</a> from lv_ta.o(i.lv_ta_signal) referenced from lv_ta.o(i.lv_ta_create)
 <LI><a href="#[f2]">lv_tabview_signal</a> from lv_tabview.o(i.lv_tabview_signal) referenced from lv_tabview.o(i.lv_tabview_create)
 <LI><a href="#[20]">lv_txt_unicode_to_utf8</a> from lv_txt.o(i.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1b]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(i.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1c]">lv_txt_utf8_get_char_id</a> from lv_txt.o(i.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[21]">lv_txt_utf8_get_length</a> from lv_txt.o(i.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[19]">lv_txt_utf8_next</a> from lv_txt.o(i.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1a]">lv_txt_utf8_prev</a> from lv_txt.o(i.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[18]">lv_txt_utf8_size</a> from lv_txt.o(i.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[7e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[142]">math_abs</a> from lmathlib.o(i.math_abs) referenced from lmathlib.o(.constdata)
 <LI><a href="#[143]">math_acos</a> from lmathlib.o(i.math_acos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[144]">math_asin</a> from lmathlib.o(i.math_asin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[145]">math_atan</a> from lmathlib.o(i.math_atan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[146]">math_ceil</a> from lmathlib.o(i.math_ceil) referenced from lmathlib.o(.constdata)
 <LI><a href="#[147]">math_cos</a> from lmathlib.o(i.math_cos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[148]">math_deg</a> from lmathlib.o(i.math_deg) referenced from lmathlib.o(.constdata)
 <LI><a href="#[149]">math_exp</a> from lmathlib.o(i.math_exp) referenced from lmathlib.o(.constdata)
 <LI><a href="#[14b]">math_floor</a> from lmathlib.o(i.math_floor) referenced from lmathlib.o(.constdata)
 <LI><a href="#[14c]">math_fmod</a> from lmathlib.o(i.math_fmod) referenced from lmathlib.o(.constdata)
 <LI><a href="#[14e]">math_log</a> from lmathlib.o(i.math_log) referenced from lmathlib.o(.constdata)
 <LI><a href="#[14f]">math_max</a> from lmathlib.o(i.math_max) referenced from lmathlib.o(.constdata)
 <LI><a href="#[150]">math_min</a> from lmathlib.o(i.math_min) referenced from lmathlib.o(.constdata)
 <LI><a href="#[151]">math_modf</a> from lmathlib.o(i.math_modf) referenced from lmathlib.o(.constdata)
 <LI><a href="#[152]">math_rad</a> from lmathlib.o(i.math_rad) referenced from lmathlib.o(.constdata)
 <LI><a href="#[153]">math_random</a> from lmathlib.o(i.math_random) referenced from lmathlib.o(.constdata)
 <LI><a href="#[154]">math_randomseed</a> from lmathlib.o(i.math_randomseed) referenced from lmathlib.o(.constdata)
 <LI><a href="#[155]">math_sin</a> from lmathlib.o(i.math_sin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[156]">math_sqrt</a> from lmathlib.o(i.math_sqrt) referenced from lmathlib.o(.constdata)
 <LI><a href="#[157]">math_tan</a> from lmathlib.o(i.math_tan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[14a]">math_toint</a> from lmathlib.o(i.math_toint) referenced from lmathlib.o(.constdata)
 <LI><a href="#[158]">math_type</a> from lmathlib.o(i.math_type) referenced from lmathlib.o(.constdata)
 <LI><a href="#[14d]">math_ult</a> from lmathlib.o(i.math_ult) referenced from lmathlib.o(.constdata)
 <LI><a href="#[160]">os_clock</a> from loslib.o(i.os_clock) referenced from loslib.o(.constdata)
 <LI><a href="#[161]">os_date</a> from loslib.o(i.os_date) referenced from loslib.o(.constdata)
 <LI><a href="#[162]">os_difftime</a> from loslib.o(i.os_difftime) referenced from loslib.o(.constdata)
 <LI><a href="#[163]">os_execute</a> from loslib.o(i.os_execute) referenced from loslib.o(.constdata)
 <LI><a href="#[164]">os_exit</a> from loslib.o(i.os_exit) referenced from loslib.o(.constdata)
 <LI><a href="#[165]">os_getenv</a> from loslib.o(i.os_getenv) referenced from loslib.o(.constdata)
 <LI><a href="#[166]">os_remove</a> from loslib.o(i.os_remove) referenced from loslib.o(.constdata)
 <LI><a href="#[167]">os_rename</a> from loslib.o(i.os_rename) referenced from loslib.o(.constdata)
 <LI><a href="#[168]">os_setlocale</a> from loslib.o(i.os_setlocale) referenced from loslib.o(.constdata)
 <LI><a href="#[169]">os_time</a> from loslib.o(i.os_time) referenced from loslib.o(.constdata)
 <LI><a href="#[16a]">os_tmpname</a> from loslib.o(i.os_tmpname) referenced from loslib.o(.constdata)
 <LI><a href="#[17e]">pack</a> from ltablib.o(i.pack) referenced from ltablib.o(.constdata)
 <LI><a href="#[c0]">panic</a> from lauxlib.o(i.panic) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[f7]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[f5]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[f8]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[e8]">pwd_char_hider_anim</a> from lv_ta.o(i.pwd_char_hider_anim) referenced from lv_ta.o(i.lv_ta_add_char)
 <LI><a href="#[e8]">pwd_char_hider_anim</a> from lv_ta.o(i.pwd_char_hider_anim) referenced from lv_ta.o(i.lv_ta_add_text)
 <LI><a href="#[e8]">pwd_char_hider_anim</a> from lv_ta.o(i.pwd_char_hider_anim) referenced from lv_ta.o(i.lv_ta_set_text)
 <LI><a href="#[e9]">pwd_char_hider_anim_ready</a> from lv_ta.o(i.pwd_char_hider_anim_ready) referenced from lv_ta.o(i.lv_ta_add_char)
 <LI><a href="#[e9]">pwd_char_hider_anim_ready</a> from lv_ta.o(i.pwd_char_hider_anim_ready) referenced from lv_ta.o(i.lv_ta_add_text)
 <LI><a href="#[e9]">pwd_char_hider_anim_ready</a> from lv_ta.o(i.pwd_char_hider_anim_ready) referenced from lv_ta.o(i.lv_ta_set_text)
 <LI><a href="#[c5]">resume</a> from ldo.o(i.resume) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[e5]">scrl_def_event_cb</a> from lv_page.o(i.scrl_def_event_cb) referenced from lv_page.o(i.lv_page_create)
 <LI><a href="#[15e]">searcher_C</a> from loadlib.o(i.searcher_C) referenced from loadlib.o(.constdata)
 <LI><a href="#[15f]">searcher_Croot</a> from loadlib.o(i.searcher_Croot) referenced from loadlib.o(.constdata)
 <LI><a href="#[15d]">searcher_Lua</a> from loadlib.o(i.searcher_Lua) referenced from loadlib.o(.constdata)
 <LI><a href="#[15c]">searcher_preload</a> from loadlib.o(i.searcher_preload) referenced from loadlib.o(.constdata)
 <LI><a href="#[182]">sort</a> from ltablib.o(i.sort) referenced from ltablib.o(.constdata)
 <LI><a href="#[16b]">str_byte</a> from lstrlib.o(i.str_byte) referenced from lstrlib.o(.constdata)
 <LI><a href="#[16c]">str_char</a> from lstrlib.o(i.str_char) referenced from lstrlib.o(.constdata)
 <LI><a href="#[16d]">str_dump</a> from lstrlib.o(i.str_dump) referenced from lstrlib.o(.constdata)
 <LI><a href="#[16e]">str_find</a> from lstrlib.o(i.str_find) referenced from lstrlib.o(.constdata)
 <LI><a href="#[16f]">str_format</a> from lstrlib.o(i.str_format) referenced from lstrlib.o(.constdata)
 <LI><a href="#[171]">str_gsub</a> from lstrlib.o(i.str_gsub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[172]">str_len</a> from lstrlib.o(i.str_len) referenced from lstrlib.o(.constdata)
 <LI><a href="#[173]">str_lower</a> from lstrlib.o(i.str_lower) referenced from lstrlib.o(.constdata)
 <LI><a href="#[174]">str_match</a> from lstrlib.o(i.str_match) referenced from lstrlib.o(.constdata)
 <LI><a href="#[179]">str_pack</a> from lstrlib.o(i.str_pack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[17a]">str_packsize</a> from lstrlib.o(i.str_packsize) referenced from lstrlib.o(.constdata)
 <LI><a href="#[175]">str_rep</a> from lstrlib.o(i.str_rep) referenced from lstrlib.o(.constdata)
 <LI><a href="#[176]">str_reverse</a> from lstrlib.o(i.str_reverse) referenced from lstrlib.o(.constdata)
 <LI><a href="#[177]">str_sub</a> from lstrlib.o(i.str_sub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[17b]">str_unpack</a> from lstrlib.o(i.str_unpack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[178]">str_upper</a> from lstrlib.o(i.str_upper) referenced from lstrlib.o(.constdata)
 <LI><a href="#[f3]">tab_btnm_event_cb</a> from lv_tabview.o(i.tab_btnm_event_cb) referenced from lv_tabview.o(i.lv_tabview_create)
 <LI><a href="#[f1]">tabpage_scrl_signal</a> from lv_tabview.o(i.tabpage_scrl_signal) referenced from lv_tabview.o(i.lv_tabview_add_tab)
 <LI><a href="#[f0]">tabpage_signal</a> from lv_tabview.o(i.tabpage_signal) referenced from lv_tabview.o(i.lv_tabview_add_tab)
 <LI><a href="#[f0]">tabpage_signal</a> from lv_tabview.o(i.tabpage_signal) referenced from lv_tabview.o(i.tabview_realign)
 <LI><a href="#[17c]">tconcat</a> from ltablib.o(i.tconcat) referenced from ltablib.o(.constdata)
 <LI><a href="#[17d]">tinsert</a> from ltablib.o(i.tinsert) referenced from ltablib.o(.constdata)
 <LI><a href="#[181]">tmove</a> from ltablib.o(i.tmove) referenced from ltablib.o(.constdata)
 <LI><a href="#[180]">tremove</a> from ltablib.o(i.tremove) referenced from ltablib.o(.constdata)
 <LI><a href="#[af]">unicode_list_compare</a> from lv_font_fmt_txt.o(i.unicode_list_compare) referenced from lv_font_fmt_txt.o(i.get_glyph_dsc_id)
 <LI><a href="#[17f]">unpack</a> from ltablib.o(i.unpack) referenced from ltablib.o(.constdata)
 <LI><a href="#[c6]">unroll</a> from ldo.o(i.unroll) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[185]">utfchar</a> from lutf8lib.o(i.utfchar) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[186]">utflen</a> from lutf8lib.o(i.utflen) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[f6]">writer</a> from lstrlib.o(i.writer) referenced from lstrlib.o(i.str_dump)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[80]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[54d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1a8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1aa]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[54f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[550]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[551]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ab]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[552]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[28]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[542]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[541]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2a]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53c]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[382]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[398]"></a>ungetc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[83]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[29f]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::toUpperCase()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
</UL>

<P><STRONG><a name="[512]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>

<P><STRONG><a name="[514]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[515]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
</UL>

<P><STRONG><a name="[399]"></a>localeconv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, localeconv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[1b2]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[1b6]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[553]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_ctrl_map
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[4b3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
</UL>

<P><STRONG><a name="[554]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[555]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[556]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::parsePathName(const char*, fname_t*, const char**)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[557]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[558]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[2ab]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[559]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[431]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
</UL>

<P><STRONG><a name="[34b]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[2a3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_cut
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[1bb]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::equals(const char*) const
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_active_btn_text
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>

<P><STRONG><a name="[535]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[2a6]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
</UL>

<P><STRONG><a name="[1ba]"></a>strcoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[2a2]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[52b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[3c4]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[444]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[3c3]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
</UL>

<P><STRONG><a name="[1a7]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_LuaScript_cpp_c2241cb2
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[381]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[55a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[3fc]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[3fe]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[55b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[55d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[55e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[55f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[1b3]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[1cf]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[1d0]"></a>__strtof_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, strtof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[560]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[561]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[2cb]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[1ac]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[1cb]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1d4]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[1d3]"></a>_frem</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, frem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[1c2]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1c1]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[562]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[1a9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[563]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[1d9]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[81]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[564]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[565]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[566]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[567]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[1de]"></a>ADC_CommonInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[516]"></a>ADC_DMA_Register</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, adc.o(i.ADC_DMA_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMA_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[1ef]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC
</UL>

<P><STRONG><a name="[1ee]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC
</UL>

<P><STRONG><a name="[1df]"></a>ADC_Init</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[1ec]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC
</UL>

<P><STRONG><a name="[1ed]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC
</UL>

<P><STRONG><a name="[1db]"></a>ADCx_Init</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, adc.o(i.ADCx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADCx_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>Delay_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e7]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>GPIO_Init</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[201]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[1e8]"></a>GPIOx_Init</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, gpio.o(i.GPIOx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[1eb]"></a>Get_ADC</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc.o(i.Get_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_ADC &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>

<P><STRONG><a name="[28c]"></a>Get_GPIO_PinSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i.Get_GPIO_PinSource))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[200]"></a>Get_Pinx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.Get_Pinx))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[24]"></a>HardFault_Handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, displaybasic.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HardFault_Handler &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28d]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[50b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fe]"></a>PWM_Init</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = PWM_Init &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pinx
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[1e9]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[212]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockCmd
</UL>

<P><STRONG><a name="[2ba]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[1dd]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockCmd
</UL>

<P><STRONG><a name="[1dc]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[217]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2b7]"></a>SPI_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
</UL>

<P><STRONG><a name="[2b9]"></a>SPI_Init</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[2b]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[7f]"></a>SystemInit</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM7_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_UP_TIM13_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[206]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[211]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[205]"></a>TIM_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[209]"></a>TIM_OC1Init</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[20a]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[20b]"></a>TIM_OC2Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[20c]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[20d]"></a>TIM_OC3Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[20e]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[20f]"></a>TIM_OC4Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[210]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[208]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[203]"></a>TIMx_OCxInit</STRONG> (Thumb, 324 bytes, Stack size 88 bytes, pwm.o(i.TIMx_OCxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIMx_OCxInit &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockCmd
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[207]"></a>TimerClockCmd</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, timer.o(i.TimerClockCmd))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[51]"></a>USART1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hardwareserial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hardwareserial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART3_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hardwareserial.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28f]"></a>USART_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[213]"></a>USART_GetITStatus</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[28e]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[216]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[214]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[290]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[218]"></a>GT911_Init()</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gt911.o(i._Z10GT911_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GT911_Init() &rArr; GT_IIC_Read_Byte(unsigned char) &rArr; GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Send_Byte(unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Read_Byte(unsigned char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Start()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Stop()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init()
</UL>

<P><STRONG><a name="[a6]"></a>GT911_Scan()</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, gt911.o(i._Z10GT911_Scanv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GT911_Scan() &rArr; GT_IIC_Read_Byte(unsigned char) &rArr; GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Send_Byte(unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Read_Byte(unsigned char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Start()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i._Z7TP_Initv)
</UL>
<P><STRONG><a name="[219]"></a>GT_IIC_Init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gtiic.o(i._Z11GT_IIC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GT_IIC_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
</UL>

<P><STRONG><a name="[21f]"></a>GT_IIC_Stop()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gtiic.o(i._Z11GT_IIC_Stopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GT_IIC_Stop() &rArr; GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_SetSdaMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
</UL>

<P><STRONG><a name="[224]"></a>LuaReg_GPIO()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, luagpio.o(i._Z11LuaReg_GPIOv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = LuaReg_GPIO() &rArr; LuaScript::registerFunc(const char*, int(*)(lua_State*)) &rArr; lua_setglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::registerFunc(const char*, int(*)(lua_State*))
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LuaScript(void*)
</UL>

<P><STRONG><a name="[226]"></a>LuaReg_Time()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, luatime.o(i._Z11LuaReg_Timev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = LuaReg_Time() &rArr; LuaScript::registerFunc(const char*, int(*)(lua_State*)) &rArr; lua_setglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::registerFunc(const char*, int(*)(lua_State*))
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LuaScript(void*)
</UL>

<P><STRONG><a name="[21b]"></a>GT_IIC_Start()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gtiic.o(i._Z12GT_IIC_Startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GT_IIC_Start() &rArr; GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_SetSdaMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
</UL>

<P><STRONG><a name="[a4]"></a>Task_Dispaly(void*)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, displaybasic.o(i._Z12Task_DispalyPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = Task_Dispaly(void*) &rArr; PageCreat_LuaScript() &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWrite
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::begin()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::fillScreen(unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_fs_init()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_init()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i._Z5setupv)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[235]"></a>lv_user_init()</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, lv_user.o(i._Z12lv_user_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_user_init() &rArr; lv_disp_drv_register &rArr; lv_task_create &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[223]"></a>GT_SetSdaMode(unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gtiic.o(i._Z13GT_SetSdaModeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Send_Byte(unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Read_Byte(unsigned char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Start()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Stop()
</UL>

<P><STRONG><a name="[246]"></a>LuaScriptStart(const char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luabasic.o(i._Z14LuaScriptStartPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LuaScriptStart(const char*) &rArr; vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[a5]"></a>Task_LuaScript(void*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, luabasic.o(i._Z14Task_LuaScriptPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = Task_LuaScript(void*) &rArr; LuaScript::doString(const char*) &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::doString(const char*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::begin()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaReg_Time()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaReg_GPIO()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i._Z5setupv)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[236]"></a>lv_user_fs_init()</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, lv_user_fs.o(i._Z15lv_user_fs_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_user_fs_init() &rArr; SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings) &rArr; SdSpiAltDriver::begin(unsigned char) &rArr; SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::init(unsigned char)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[21e]"></a>GT_IIC_Read_Byte(unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, gtiic.o(i._Z16GT_IIC_Read_Byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GT_IIC_Read_Byte(unsigned char) &rArr; GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_SetSdaMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
</UL>

<P><STRONG><a name="[21c]"></a>GT_IIC_Send_Byte(unsigned char)</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, gtiic.o(i._Z16GT_IIC_Send_Byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GT_IIC_Send_Byte(unsigned char) &rArr; GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_SetSdaMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
</UL>

<P><STRONG><a name="[9e]"></a>LuaPrintCallback(const char*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, page_luascript.o(i._Z16LuaPrintCallbackPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = LuaPrintCallback(const char*) &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
</UL>
<P><STRONG><a name="[8e]"></a>my_touchpad_read(_lv_indev_drv_t*, lv_indev_data_t*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_user.o(i._Z16my_touchpad_readP15_lv_indev_drv_tP15lv_indev_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_touchpad_read(_lv_indev_drv_t*, lv_indev_data_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user.o(i._Z12lv_user_initv)
</UL>
<P><STRONG><a name="[237]"></a>PageCreat_LuaScript()</STRONG> (Thumb, 1186 bytes, Stack size 48 bytes, page_luascript.o(i._Z19PageCreat_LuaScriptv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PageCreat_LuaScript() &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text_sel
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[27e]"></a>setup()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i._Z5setupv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d]"></a>TP_Init()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, touch.o(i._Z7TP_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TP_Init() &rArr; GT911_Init() &rArr; GT_IIC_Read_Byte(unsigned char) &rArr; GT_SetSdaMode(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>fs_ready(_lv_fs_drv_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_user_fs.o(i._Z8fs_readyP12_lv_fs_drv_t))
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[194]"></a>TFT_ILI9488::fillScreen(unsigned short)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tft_ili9488.o(i._ZN11TFT_ILI948810fillScreenEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TFT_ILI9488::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
</UL>
<P><STRONG><a name="[191]"></a>TFT_ILI9488::setRotation(unsigned char)</STRONG> (Thumb, 426 bytes, Stack size 0 bytes, tft_ili9488.o(i._ZN11TFT_ILI948811setRotationEh))
<BR>[Address Reference Count : 1]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
</UL>
<P><STRONG><a name="[192]"></a>TFT_ILI9488::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tft_ili9488.o(i._ZN11TFT_ILI948813drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TFT_ILI9488::drawFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
</UL>
<P><STRONG><a name="[195]"></a>TFT_ILI9488::setAddrWindow(short, short, short, short)</STRONG> (Thumb, 546 bytes, Stack size 12 bytes, tft_ili9488.o(i._ZN11TFT_ILI948813setAddrWindowEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TFT_ILI9488::setAddrWindow(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
</UL>
<P><STRONG><a name="[244]"></a>TFT_ILI9488::fastDrawRGBBitmap(short, short, unsigned short*, short, short)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tft_ili9488.o(i._ZN11TFT_ILI948817fastDrawRGBBitmapEssPtss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TFT_ILI9488::fastDrawRGBBitmap(short, short, unsigned short*, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_disp_flush(_disp_drv_t*, const lv_area_t*, lv_color16_t*)
</UL>

<P><STRONG><a name="[233]"></a>TFT_ILI9488::begin()</STRONG> (Thumb, 3226 bytes, Stack size 16 bytes, tft_ili9488.o(i._ZN11TFT_ILI94885beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TFT_ILI9488::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[18a]"></a>TFT_ILI9488::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tft_ili9488.o(i._ZN11TFT_ILI94889drawPixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TFT_ILI9488::drawPixel(short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
</UL>
<P><STRONG><a name="[196]"></a>TFT_ILI9488::setCursor(short, short)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tft_ili9488.o(i._ZN11TFT_ILI94889setCursorEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_ILI9488::setCursor(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
</UL>
<P><STRONG><a name="[288]"></a>TFT_ILI9488::TFT_ILI9488(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, tft_ili9488.o(i._ZN11TFT_ILI9488C1Ehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TFT_ILI9488::TFT_ILI9488(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_DisplayBasic_cpp_screen
</UL>

<P><STRONG><a name="[568]"></a>TFT_ILI9488::TFT_ILI9488__sub_object(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, tft_ili9488.o(i._ZN11TFT_ILI9488C1Ehhhhhh), UNUSED)

<P><STRONG><a name="[18b]"></a>Adafruit_GFX::startWrite()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv))
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[18c]"></a>Adafruit_GFX::writePixel(short, short, unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst))
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[259]"></a>Adafruit_GFX::setTextSize(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX11setTextSizeEh))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>

<P><STRONG><a name="[257]"></a>Adafruit_GFX::setTextColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX12setTextColorEt))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>

<P><STRONG><a name="[198]"></a>Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[18d]"></a>Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[18e]"></a>Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[188]"></a>Adafruit_GFX::write(unsigned char)</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Adafruit_GFX::write(unsigned char) &rArr; Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[258]"></a>Adafruit_GFX::setFont(const GFXfont*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX7setFontEPK7GFXfont))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>

<P><STRONG><a name="[28a]"></a>Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 640 bytes, Stack size 96 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8drawCharEsshtth))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::write(unsigned char)
</UL>

<P><STRONG><a name="[190]"></a>Adafruit_GFX::endWrite()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv))
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[193]"></a>Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[18f]"></a>Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Adafruit_GFX::writeLine(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[289]"></a>Adafruit_GFX::Adafruit_GFX__sub_object(short, short)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFXC2Ess))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::TFT_ILI9488(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[27f]"></a>HardwareSerial::begin(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HardwareSerial::begin(unsigned) &rArr; HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[28b]"></a>HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)</STRONG> (Thumb, 312 bytes, Stack size 80 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj13SERIAL_Confighh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GPIO_PinSource
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
</UL>

<P><STRONG><a name="[199]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareSerial::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[291]"></a>SdSpiAltDriver::deactivate()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdspistm32.o(i._ZN14SdSpiAltDriver10deactivateEv))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[293]"></a>SdSpiAltDriver::send(const unsigned char*, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdspistm32.o(i._ZN14SdSpiAltDriver4sendEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdSpiAltDriver::send(const unsigned char*, unsigned) &rArr; SPIClass::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
</UL>

<P><STRONG><a name="[295]"></a>SdSpiAltDriver::send(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdspistm32.o(i._ZN14SdSpiAltDriver4sendEh))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[297]"></a>SdSpiAltDriver::begin(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdspistm32.o(i._ZN14SdSpiAltDriver5beginEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SdSpiAltDriver::begin(unsigned char) &rArr; SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
</UL>

<P><STRONG><a name="[299]"></a>SdSpiAltDriver::receive(unsigned char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdspistm32.o(i._ZN14SdSpiAltDriver7receiveEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdSpiAltDriver::receive(unsigned char*, unsigned) &rArr; SPIClass::read(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::read(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[29b]"></a>SdSpiAltDriver::receive()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdspistm32.o(i._ZN14SdSpiAltDriver7receiveEv))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[29c]"></a>SdSpiAltDriver::activate()</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdspistm32.o(i._ZN14SdSpiAltDriver8activateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SdSpiAltDriver::activate() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[2eb]"></a>NRF::NRF(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, nrf.o(i._ZN3NRFC1Ehhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NRF::NRF(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_ComBasic_cpp_nrf
</UL>

<P><STRONG><a name="[569]"></a>NRF::NRF__sub_object(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, nrf.o(i._ZN3NRFC1Ehhhhh), UNUSED)

<P><STRONG><a name="[25c]"></a>Print::print(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>

<P><STRONG><a name="[189]"></a>Print::write(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> print.o(.constdata__ZTV5Print)
<LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
<LI> tft_ili9488.o(.constdata__ZTV11TFT_ILI9488)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> displaybasic.o(.constdata__ZTV6SdFile)
</UL>
<P><STRONG><a name="[25d]"></a>Print::printf(const char*, ...)</STRONG> (Thumb, 42 bytes, Stack size 128 bytes, print.o(i._ZN5Print6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>

<P><STRONG><a name="[25a]"></a>Print::println(const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>

<P><STRONG><a name="[22f]"></a>String::toUpperCase()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wstring.o(i._ZN6String11toUpperCaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = String::toUpperCase()
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
</UL>

<P><STRONG><a name="[2a0]"></a>String::copy(const char*, unsigned)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wstring.o(i._ZN6String4copyEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = String::copy(const char*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>

<P><STRONG><a name="[22e]"></a>String::String(const char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wstring.o(i._ZN6StringC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
</UL>

<P><STRONG><a name="[56a]"></a>String::String__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wstring.o(i._ZN6StringC1EPKc), UNUSED)

<P><STRONG><a name="[231]"></a>String::~String()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wstring.o(i._ZN6StringD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = String::~String() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
</UL>

<P><STRONG><a name="[56b]"></a>String::~String__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wstring.o(i._ZN6StringD1Ev), UNUSED)

<P><STRONG><a name="[2a4]"></a>FatFile::lfnUniqueSfn(fname_t*)</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, fatfilelfn.o(i._ZN7FatFile12lfnUniqueSfnEP7fname_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[2a5]"></a>FatFile::readDirCache(bool)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fatfile.o(i._ZN7FatFile12readDirCacheEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
</UL>

<P><STRONG><a name="[2a7]"></a>FatFile::addDirCluster()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fatfile.o(i._ZN7FatFile13addDirClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FatFile::addDirCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[2ac]"></a>FatFile::cacheDirEntry(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fatfile.o(i._ZN7FatFile13cacheDirEntryEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FatFile::cacheDirEntry(unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
</UL>

<P><STRONG><a name="[2ad]"></a>FatFile::parsePathName(const char*, fname_t*, const char**)</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, fatfilelfn.o(i._ZN7FatFile13parsePathNameEPKcP7fname_tPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FatFile::parsePathName(const char*, fname_t*, const char**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
</UL>

<P><STRONG><a name="[2ae]"></a>FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, fatfile.o(i._ZN7FatFile15openCachedEntryEPS_thh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char) &rArr; FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[2b0]"></a>FatFile::open(FatFile*, fname_t*, unsigned char)</STRONG> (Thumb, 938 bytes, Stack size 64 bytes, fatfilelfn.o(i._ZN7FatFile4openEPS_P7fname_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>

<P><STRONG><a name="[232]"></a>FatFile::open(FatFile*, const char*, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 112 bytes, fatfile.o(i._ZN7FatFile4openEPS_PKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::parsePathName(const char*, fname_t*, const char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rename(_lv_fs_drv_t*, const char*, const char*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open(_lv_fs_drv_t*, void*, const char*, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open(_lv_fs_drv_t*, void*, const char*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove(FatFile*, const char*)
</UL>

<P><STRONG><a name="[283]"></a>FatFile::read(void*, unsigned)</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, fatfile.o(i._ZN7FatFile4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
</UL>

<P><STRONG><a name="[284]"></a>FatFile::sync()</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, fatfile.o(i._ZN7FatFile4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FatFile::sync() &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_trunc(_lv_fs_drv_t*, void*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>

<P><STRONG><a name="[23a]"></a>FatFile::close()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fatfile.o(i._ZN7FatFile5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FatFile::close() &rArr; FatFile::sync() &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close(_lv_fs_drv_t*, void*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_close(_lv_fs_drv_t*, void*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_fs_init()
</UL>

<P><STRONG><a name="[2b4]"></a>FatFile::mkdir(FatFile*, fname_t*)</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, fatfile.o(i._ZN7FatFile5mkdirEPS_P7fname_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
</UL>

<P><STRONG><a name="[2b5]"></a>FatFile::mkdir(FatFile*, const char*, bool)</STRONG> (Thumb, 166 bytes, Stack size 112 bytes, fatfile.o(i._ZN7FatFile5mkdirEPS_PKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::parsePathName(const char*, fname_t*, const char**)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
</UL>

<P><STRONG><a name="[285]"></a>FatFile::write(const void*, unsigned)</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, fatfile.o(i._ZN7FatFile5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FatFile::write(const void*, unsigned) &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFile::write(unsigned char)
</UL>

<P><STRONG><a name="[286]"></a>FatFile::remove(FatFile*, const char*)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, fatfile.o(i._ZN7FatFile6removeEPS_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = FatFile::remove(FatFile*, const char*) &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_remove(_lv_fs_drv_t*, const char*)
</UL>

<P><STRONG><a name="[2b6]"></a>FatFile::remove()</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, fatfilelfn.o(i._ZN7FatFile6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FatFile::remove() &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::cacheDirEntry(unsigned char)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove(FatFile*, const char*)
</UL>

<P><STRONG><a name="[287]"></a>FatFile::rename(FatFile*, const char*)</STRONG> (Thumb, 422 bytes, Stack size 168 bytes, fatfile.o(i._ZN7FatFile6renameEPS_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = FatFile::rename(FatFile*, const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rename(_lv_fs_drv_t*, const char*, const char*)
</UL>

<P><STRONG><a name="[282]"></a>FatFile::seekSet(unsigned)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fatfile.o(i._ZN7FatFile7seekSetEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_seek(_lv_fs_drv_t*, void*, unsigned)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open(_lv_fs_drv_t*, void*, const char*, unsigned char)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
</UL>

<P><STRONG><a name="[250]"></a>FatFile::openRoot(FatVolume*)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fatfile.o(i._ZN7FatFile8openRootEP9FatVolume))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_fs_init()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
</UL>

<P><STRONG><a name="[ac]"></a>TwoWire::~TwoWire()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wire.o(i.__sti___8_Wire_cpp_928ee5ff)
</UL>
<P><STRONG><a name="[56c]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev), UNUSED)

<P><STRONG><a name="[2aa]"></a>FatCache::read(unsigned, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fatvolume.o(i._ZN8FatCache4readEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::cacheDirEntry(unsigned char)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
</UL>

<P><STRONG><a name="[2b3]"></a>FatCache::sync()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fatvolume.o(i._ZN8FatCache4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FatCache::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::init(unsigned char)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPut(unsigned, unsigned)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>

<P><STRONG><a name="[292]"></a>SPIClass::endTransaction()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(i._ZN8SPIClass14endTransactionEv))
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
</UL>

<P><STRONG><a name="[29d]"></a>SPIClass::beginTransaction(SPISettings)</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, spi.o(i._ZN8SPIClass16beginTransactionE11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::activate()
</UL>

<P><STRONG><a name="[29a]"></a>SPIClass::read(unsigned char*, unsigned)</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass4readEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIClass::read(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[298]"></a>SPIClass::begin()</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, spi.o(i._ZN8SPIClass5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::begin(unsigned char)
</UL>

<P><STRONG><a name="[294]"></a>SPIClass::write(const unsigned char*, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIClass::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2b8]"></a>SPIClass::setClock(unsigned)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass8setClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[2a8]"></a>FatVolume::allocateCluster(unsigned, unsigned*)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, fatvolume.o(i._ZN9FatVolume15allocateClusterEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPut(unsigned, unsigned)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
</UL>

<P><STRONG><a name="[24f]"></a>FatVolume::init(unsigned char)</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, fatvolume.o(i._ZN9FatVolume4initEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FatVolume::init(unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_fs_init()
</UL>

<P><STRONG><a name="[2b1]"></a>FatVolume::fatGet(unsigned, unsigned*)</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, fatvolume.o(i._ZN9FatVolume6fatGetEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[2bb]"></a>FatVolume::fatPut(unsigned, unsigned)</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, fatvolume.o(i._ZN9FatVolume6fatPutEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FatVolume::fatPut(unsigned, unsigned) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[2af]"></a>FatVolume::freeChain(unsigned)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fatvolume.o(i._ZN9FatVolume9freeChainEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FatVolume::freeChain(unsigned) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPut(unsigned, unsigned)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[225]"></a>LuaScript::registerFunc(const char*, int(*)(lua_State*))</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, luascript.o(i._ZN9LuaScript12registerFuncEPKcPFYiP9lua_StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = LuaScript::registerFunc(const char*, int(*)(lua_State*)) &rArr; lua_setglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaReg_Time()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaReg_GPIO()
</UL>

<P><STRONG><a name="[25f]"></a>LuaScript::registerStrOutput(void(*)(const char*))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luascript.o(i._ZN9LuaScript17registerStrOutputEPFvPKcE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[262]"></a>LuaScript::end()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, luascript.o(i._ZN9LuaScript3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LuaScript::end() &rArr; lua_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[249]"></a>LuaScript::begin()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, luascript.o(i._ZN9LuaScript5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = LuaScript::begin() &rArr; luaL_openlibs &rArr; luaL_requiref &rArr; lua_setglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LuaScript(void*)
</UL>

<P><STRONG><a name="[24b]"></a>LuaScript::doString(const char*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, luascript.o(i._ZN9LuaScript8doStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = LuaScript::doString(const char*) &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LuaScript(void*)
</UL>

<P><STRONG><a name="[ab]"></a>LuaScript::~LuaScript()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, luascript.o(i._ZN9LuaScriptD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LuaScript::~LuaScript() &rArr; lua_close &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luascript.o(i.__sti___13_LuaScript_cpp_c2241cb2)
</UL>
<P><STRONG><a name="[56d]"></a>LuaScript::~LuaScript__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, luascript.o(i._ZN9LuaScriptD1Ev), UNUSED)

<P><STRONG><a name="[19a]"></a>PrintFile::write(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, displaybasic.o(i._ZN9PrintFile5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PrintFile::write(unsigned char) &rArr; FatFile::write(const void*, unsigned) &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaybasic.o(.constdata__ZTV6SdFile)
</UL>
<P><STRONG><a name="[19c]"></a>SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sdspicard.o(i._ZN9SdSpiCard10readBlocksEjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiAltDriver::activate() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspicard.o(.constdata__ZTV9SdSpiCard)
</UL>
<P><STRONG><a name="[19d]"></a>SdSpiCard::syncBlocks()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdspicard.o(i._ZN9SdSpiCard10syncBlocksEv))
<BR>[Address Reference Count : 1]<UL><LI> sdspicard.o(.constdata__ZTV9SdSpiCard)
</UL>
<P><STRONG><a name="[19e]"></a>SdSpiCard::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, sdspicard.o(i._ZN9SdSpiCard10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiAltDriver::activate() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspicard.o(.constdata__ZTV9SdSpiCard)
</UL>
<P><STRONG><a name="[2c3]"></a>SdSpiCard::cardCommand(unsigned char, unsigned)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, sdspicard.o(i._ZN9SdSpiCard11cardCommandEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiAltDriver::activate() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::activate()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[19f]"></a>SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, sdspicard.o(i._ZN9SdSpiCard11writeBlocksEjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiAltDriver::activate() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspicard.o(.constdata__ZTV9SdSpiCard)
</UL>
<P><STRONG><a name="[24e]"></a>SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)</STRONG> (Thumb, 540 bytes, Stack size 64 bytes, sdspicard.o(i._ZN9SdSpiCard5beginEP14SdSpiAltDriverh11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings) &rArr; SdSpiAltDriver::begin(unsigned char) &rArr; SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::activate()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::begin(unsigned char)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_fs_init()
</UL>

<P><STRONG><a name="[2c4]"></a>SdSpiCard::readData(unsigned char*, unsigned)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, sdspicard.o(i._ZN9SdSpiCard8readDataEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SdSpiCard::readData(unsigned char*, unsigned) &rArr; SdSpiAltDriver::receive(unsigned char*, unsigned) &rArr; SPIClass::read(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive(unsigned char*, unsigned)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[19b]"></a>SdSpiCard::readBlock(unsigned, unsigned char*)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard9readBlockEjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SdSpiCard::readBlock(unsigned, unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiAltDriver::activate() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspicard.o(.constdata__ZTV9SdSpiCard)
</UL>
<P><STRONG><a name="[2c5]"></a>SdSpiCard::writeData(unsigned char, const unsigned char*)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard9writeDataEhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdSpiCard::writeData(unsigned char, const unsigned char*) &rArr; SdSpiAltDriver::send(const unsigned char*, unsigned) &rArr; SPIClass::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(const unsigned char*, unsigned)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::deactivate()
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[25b]"></a>Adafruit_GFX::height() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZNK12Adafruit_GFX6heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>

<P><STRONG><a name="[230]"></a>String::equals(const char*) const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wstring.o(i._ZNK6String6equalsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = String::equals(const char*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
</UL>

<P><STRONG><a name="[296]"></a>SPIClass::transfer(unsigned char) const</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(i._ZNK8SPIClass8transferEh))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::receive()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::send(unsigned char)
</UL>

<P><STRONG><a name="[2a9]"></a>FatVolume::clusterFirstBlock(unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fatvolume.o(i._ZNK9FatVolume17clusterFirstBlockEj))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
</UL>

<P><STRONG><a name="[2c6]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56e]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[33a]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[56f]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[570]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[2c8]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[571]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[442]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[572]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[573]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2c9]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[574]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[53a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>

<P><STRONG><a name="[575]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[576]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2ca]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[577]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[578]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[29e]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
</UL>

<P><STRONG><a name="[579]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4c4]"></a>__ARM_common_memclr4_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_img_decoder.o(i.__ARM_common_memclr4_8))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[52e]"></a>__ARM_common_memcpy4_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ta.o(i.__ARM_common_memcpy4_8))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[2d7]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[3c2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
</UL>

<P><STRONG><a name="[57a]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[241]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_SetSdaMode(unsigned char)
</UL>

<P><STRONG><a name="[197]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> print.o(.constdata__ZTV5Print)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[1d2]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[2cc]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2d2]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
</UL>

<P><STRONG><a name="[2d6]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
</UL>

<P><STRONG><a name="[2d9]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[513]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[57b]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[2db]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
</UL>

<P><STRONG><a name="[2dd]"></a>__hardfp_difftime</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, difftime.o(i.__hardfp_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
</UL>

<P><STRONG><a name="[2de]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
</UL>

<P><STRONG><a name="[57c]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[43f]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
</UL>

<P><STRONG><a name="[2e0]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
</UL>

<P><STRONG><a name="[50c]"></a>__hardfp_frexpf</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, frexpf.o(i.__hardfp_frexpf))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[2e1]"></a>__hardfp_log10f</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, log10f.o(i.__hardfp_log10f))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_log10f
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[2e3]"></a>__hardfp_log2f</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, log2f.o(i.__hardfp_log2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_log2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[2e4]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_logf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[57d]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[2e5]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[57e]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[2e6]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
</UL>

<P><STRONG><a name="[2e7]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
</UL>

<P><STRONG><a name="[2e8]"></a>__hardfp_strtof</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[2e9]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
</UL>

<P><STRONG><a name="[1bd]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[2e2]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
</UL>

<P><STRONG><a name="[2d4]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[2da]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[2d5]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[2df]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[2d8]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1d1]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[2dc]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[57f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[580]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[581]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2d0]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[1da]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[248]"></a>analogRead</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, arduino.o(i.analogRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = analogRead &rArr; Get_ADC &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogRead(lua_State*)
</UL>

<P><STRONG><a name="[24c]"></a>analogWrite</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, arduino.o(i.analogWrite))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogWrite(lua_State*)
</UL>

<P><STRONG><a name="[21a]"></a>delay_ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::begin()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_delay(lua_State*)
</UL>

<P><STRONG><a name="[21d]"></a>delay_us</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Send_Byte(unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Read_Byte(unsigned char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Start()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Stop()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init()
</UL>

<P><STRONG><a name="[24d]"></a>digitalRead</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, arduino.o(i.digitalRead))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalRead(lua_State*)
</UL>

<P><STRONG><a name="[256]"></a>digitalWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arduino.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalWrite(lua_State*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::begin(unsigned char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[33b]"></a>fgets</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fgets.o(i.fgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fgets
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[a8]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0fprintf)
</UL>
<P><STRONG><a name="[392]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fread
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[2cd]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[37f]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fwrite &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[397]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[2f4]"></a>luaC_barrier_</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lgc.o(i.luaC_barrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[415]"></a>luaC_barrierback_</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lgc.o(i.luaC_barrierback_))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[3e0]"></a>luaC_checkfinalizer</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lgc.o(i.luaC_checkfinalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = luaC_checkfinalizer &rArr; sweeplist &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>

<P><STRONG><a name="[448]"></a>luaC_fix</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lgc.o(i.luaC_fix))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[3e3]"></a>luaC_freeallobjects</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, lgc.o(i.luaC_freeallobjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = luaC_freeallobjects &rArr; luaD_pcall &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[3e6]"></a>luaC_fullgc</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, lgc.o(i.luaC_fullgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>

<P><STRONG><a name="[3e9]"></a>luaC_newobj</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.luaC_newobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
</UL>

<P><STRONG><a name="[327]"></a>luaC_step</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lgc.o(i.luaC_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = luaC_step &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[3eb]"></a>luaC_upvalbarrier_</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lgc.o(i.luaC_upvalbarrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>

<P><STRONG><a name="[3ec]"></a>luaC_upvdeccount</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lgc.o(i.luaC_upvdeccount))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaC_upvdeccount &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
</UL>

<P><STRONG><a name="[3ed]"></a>luaD_call</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ldo.o(i.luaD_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = luaD_call &rArr;  luaV_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[367]"></a>luaD_callnoyield</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ldo.o(i.luaD_callnoyield))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + In Cycle
<LI>Call Chain = luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dothecall
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[3aa]"></a>luaD_growstack</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ldo.o(i.luaD_growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstack
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>

<P><STRONG><a name="[3f2]"></a>luaD_hook</STRONG> (Thumb, 134 bytes, Stack size 128 bytes, ldo.o(i.luaD_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
</UL>

<P><STRONG><a name="[3f3]"></a>luaD_inctop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ldo.o(i.luaD_inctop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaD_inctop &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[3e5]"></a>luaD_pcall</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ldo.o(i.luaD_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = luaD_pcall &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
</UL>

<P><STRONG><a name="[3f8]"></a>luaD_poscall</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, ldo.o(i.luaD_poscall))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = luaD_poscall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[3ef]"></a>luaD_precall</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, ldo.o(i.luaD_precall))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = luaD_precall &rArr; luaE_extendCI &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[3fb]"></a>luaD_protectedparser</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, ldo.o(i.luaD_protectedparser))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[3f4]"></a>luaD_rawrunprotected</STRONG> (Thumb, 54 bytes, Stack size 200 bytes, ldo.o(i.luaD_rawrunprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[3f1]"></a>luaD_reallocstack</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ldo.o(i.luaD_reallocstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[3fd]"></a>luaD_shrinkstack</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ldo.o(i.luaD_shrinkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaD_shrinkstack &rArr; luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[1f4]"></a>luaD_throw</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ldo.o(i.luaD_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaD_throw &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>

<P><STRONG><a name="[3fa]"></a>luaE_extendCI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lstate.o(i.luaE_extendCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = luaE_extendCI &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[3f6]"></a>luaE_freeCI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstate.o(i.luaE_freeCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_freeCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[3ff]"></a>luaE_freethread</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lstate.o(i.luaE_freethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = luaE_freethread &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[3e8]"></a>luaE_setdebt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lstate.o(i.luaE_setdebt))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>

<P><STRONG><a name="[3f7]"></a>luaE_shrinkCI</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstate.o(i.luaE_shrinkCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_shrinkCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[3f5]"></a>luaF_close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lfunc.o(i.luaF_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = luaF_close &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[400]"></a>luaF_findupval</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lfunc.o(i.luaF_findupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaF_findupval &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[401]"></a>luaF_freeproto</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lfunc.o(i.luaF_freeproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaF_freeproto &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[3a5]"></a>luaF_getlocalname</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, lfunc.o(i.luaF_getlocalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[37c]"></a>luaF_initupvals</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lfunc.o(i.luaF_initupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaF_initupvals &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[402]"></a>luaF_newCclosure</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfunc.o(i.luaF_newCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[403]"></a>luaF_newLclosure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lfunc.o(i.luaF_newLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = luaF_newLclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[1fb]"></a>luaF_newproto</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lfunc.o(i.luaF_newproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaF_newproto &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[3c9]"></a>luaG_addinfo</STRONG> (Thumb, 60 bytes, Stack size 80 bytes, ldebug.o(i.luaG_addinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = luaG_addinfo &rArr; luaO_chunkid &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[405]"></a>luaG_concaterror</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ldebug.o(i.luaG_concaterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = luaG_concaterror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[407]"></a>luaG_errormsg</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ldebug.o(i.luaG_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = luaG_errormsg &rArr; luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>

<P><STRONG><a name="[408]"></a>luaG_opinterror</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ldebug.o(i.luaG_opinterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = luaG_opinterror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[40a]"></a>luaG_ordererror</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ldebug.o(i.luaG_ordererror))
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3ee]"></a>luaG_runerror</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, ldebug.o(i.luaG_runerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[40c]"></a>luaG_tointerror</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ldebug.o(i.luaG_tointerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[40d]"></a>luaG_traceexec</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ldebug.o(i.luaG_traceexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = luaG_traceexec &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3f9]"></a>luaG_typeerror</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ldebug.o(i.luaG_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[40e]"></a>luaH_free</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ltable.o(i.luaH_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaH_free &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[40f]"></a>luaH_get</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ltable.o(i.luaH_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = luaH_get &rArr; luaV_equalobj &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[410]"></a>luaH_getint</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ltable.o(i.luaH_getint))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
</UL>

<P><STRONG><a name="[452]"></a>luaH_getn</STRONG> (Thumb, 542 bytes, Stack size 28 bytes, ltable.o(i.luaH_getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = luaH_getn
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[44c]"></a>luaH_getshortstr</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ltable.o(i.luaH_getshortstr))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>

<P><STRONG><a name="[412]"></a>luaH_getstr</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ltable.o(i.luaH_getstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = luaH_getstr &rArr; luaV_equalobj &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[373]"></a>luaH_new</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ltable.o(i.luaH_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaH_new &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[413]"></a>luaH_newkey</STRONG> (Thumb, 660 bytes, Stack size 192 bytes, ltable.o(i.luaH_newkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + In Cycle
<LI>Call Chain = luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[416]"></a>luaH_next</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ltable.o(i.luaH_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = luaH_next &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[374]"></a>luaH_resize</STRONG> (Thumb, 682 bytes, Stack size 56 bytes, ltable.o(i.luaH_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + In Cycle
<LI>Call Chain = luaH_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[417]"></a>luaH_resizearray</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ltable.o(i.luaH_resizearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = luaH_resizearray &rArr; luaH_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[2f1]"></a>luaH_set</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ltable.o(i.luaH_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + In Cycle
<LI>Call Chain = luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[375]"></a>luaH_setint</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ltable.o(i.luaH_setint))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[418]"></a>luaK_checkstack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(i.luaK_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[302]"></a>luaK_codeABC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcode.o(i.luaK_codeABC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[316]"></a>luaK_codeABx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcode.o(i.luaK_codeABx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = luaK_codeABx &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[419]"></a>luaK_codek</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcode.o(i.luaK_codek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_codek &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[36e]"></a>luaK_concat</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lcode.o(i.luaK_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = luaK_concat &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[366]"></a>luaK_dischargevars</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lcode.o(i.luaK_dischargevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[32b]"></a>luaK_exp2RK</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lcode.o(i.luaK_exp2RK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeexpval
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[32c]"></a>luaK_exp2anyreg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeexpval
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[41a]"></a>luaK_exp2anyregup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcode.o(i.luaK_exp2anyregup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = luaK_exp2anyregup &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[2fe]"></a>luaK_exp2nextreg</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2nextreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[41b]"></a>luaK_exp2val</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcode.o(i.luaK_exp2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[391]"></a>luaK_fixline</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcode.o(i.luaK_fixline))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[533]"></a>luaK_getlabel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcode.o(i.luaK_getlabel))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[41c]"></a>luaK_goiffalse</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiffalse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_goiffalse &rArr; jumponcond &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[41d]"></a>luaK_goiftrue</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiftrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[41e]"></a>luaK_indexed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcode.o(i.luaK_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[41f]"></a>luaK_infix</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, lcode.o(i.luaK_infix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = luaK_infix &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[420]"></a>luaK_intK</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lcode.o(i.luaK_intK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[38f]"></a>luaK_jump</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.luaK_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_jump &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[300]"></a>luaK_nil</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lcode.o(i.luaK_nil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_nil &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[38a]"></a>luaK_patchclose</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcode.o(i.luaK_patchclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaK_patchclose
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>

<P><STRONG><a name="[388]"></a>luaK_patchlist</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcode.o(i.luaK_patchlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = luaK_patchlist &rArr; patchlistaux &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
</UL>

<P><STRONG><a name="[390]"></a>luaK_patchtohere</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcode.o(i.luaK_patchtohere))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = luaK_patchtohere &rArr; luaK_concat &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[421]"></a>luaK_posfix</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, lcode.o(i.luaK_posfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = luaK_posfix &rArr; codeexpval &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[422]"></a>luaK_prefix</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, lcode.o(i.luaK_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = luaK_prefix &rArr; codeexpval &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[2ff]"></a>luaK_reserveregs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcode.o(i.luaK_reserveregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = luaK_reserveregs &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[325]"></a>luaK_ret</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcode.o(i.luaK_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = luaK_ret &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[423]"></a>luaK_self</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lcode.o(i.luaK_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaK_self &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[330]"></a>luaK_setlist</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcode.o(i.luaK_setlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaK_setlist &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[306]"></a>luaK_setoneret</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lcode.o(i.luaK_setoneret))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[305]"></a>luaK_setreturns</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lcode.o(i.luaK_setreturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = luaK_setreturns &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[304]"></a>luaK_storevar</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lcode.o(i.luaK_storevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaK_storevar &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[424]"></a>luaK_stringK</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(i.luaK_stringK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[425]"></a>luaL_addlstring</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_addlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = luaL_addlstring &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[426]"></a>luaL_addstring</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_addstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = luaL_addstring &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[3cb]"></a>luaL_addvalue</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_addvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = luaL_addvalue &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[31d]"></a>luaL_argerror</STRONG> (Thumb, 132 bytes, Stack size 120 bytes, lauxlib.o(i.luaL_argerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[394]"></a>luaL_buffinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lauxlib.o(i.luaL_buffinit))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[428]"></a>luaL_buffinitsize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lauxlib.o(i.luaL_buffinitsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = luaL_buffinitsize &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[34f]"></a>luaL_checkany</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkany))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
</UL>

<P><STRONG><a name="[31b]"></a>luaL_checkinteger</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[31a]"></a>luaL_checklstring</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checklstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[42b]"></a>luaL_checknumber</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checknumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[37e]"></a>luaL_checkoption</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaL_checkoption &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
</UL>

<P><STRONG><a name="[32e]"></a>luaL_checkstack</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
</UL>

<P><STRONG><a name="[350]"></a>luaL_checktype</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checktype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[371]"></a>luaL_checkudata</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
</UL>

<P><STRONG><a name="[42c]"></a>luaL_checkversion_</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_checkversion_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaL_checkversion_ &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[243]"></a>luaL_error</STRONG> (Thumb, 90 bytes, Stack size 128 bytes, lauxlib.o(i.luaL_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakCallback(lua_State*, lua_Debug*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>

<P><STRONG><a name="[3c5]"></a>luaL_execresult</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_execresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = luaL_execresult &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
</UL>

<P><STRONG><a name="[372]"></a>luaL_fileresult</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_fileresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaL_fileresult &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
</UL>

<P><STRONG><a name="[3d8]"></a>luaL_getmetafield</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getmetafield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = luaL_getmetafield &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
</UL>

<P><STRONG><a name="[42e]"></a>luaL_getsubtable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getsubtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaL_getsubtable &rArr; lua_setfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[430]"></a>luaL_gsub</STRONG> (Thumb, 288 bytes, Stack size 8312 bytes, lauxlib.o(i.luaL_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 9896<LI>Call Chain = luaL_gsub &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[39d]"></a>luaL_len</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaL_len &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[33c]"></a>luaL_loadbufferx</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_loadbufferx))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[3d7]"></a>luaL_loadfilex</STRONG> (Thumb, 590 bytes, Stack size 576 bytes, lauxlib.o(i.luaL_loadfilex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = luaL_loadfilex &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
</UL>

<P><STRONG><a name="[2c0]"></a>luaL_loadstring</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_loadstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = luaL_loadstring &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::doString(const char*)
</UL>

<P><STRONG><a name="[434]"></a>luaL_newmetatable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_newmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaL_newmetatable &rArr; lua_setfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[2be]"></a>luaL_newstate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = luaL_newstate &rArr; lua_newstate &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_atpanic
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::begin()
</UL>

<P><STRONG><a name="[2bf]"></a>luaL_openlibs</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, linit.o(i.luaL_openlibs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaL_openlibs &rArr; luaL_requiref &rArr; lua_setglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::begin()
</UL>

<P><STRONG><a name="[31c]"></a>luaL_optinteger</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
</UL>

<P><STRONG><a name="[346]"></a>luaL_optlstring</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[437]"></a>luaL_optnumber</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaL_optnumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[395]"></a>luaL_prepbuffsize</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_prepbuffsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[396]"></a>luaL_pushresult</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_pushresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaL_pushresult &rArr; lua_pushlstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[439]"></a>luaL_pushresultsize</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_pushresultsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaL_pushresultsize &rArr; lua_pushlstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[436]"></a>luaL_requiref</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_requiref))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = luaL_requiref &rArr; lua_setglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
</UL>

<P><STRONG><a name="[43a]"></a>luaL_setfuncs</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_setfuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[3c1]"></a>luaL_setmetatable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = luaL_setmetatable &rArr; lua_getfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[3c6]"></a>luaL_testudata</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_testudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = luaL_testudata &rArr; lua_getfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
</UL>

<P><STRONG><a name="[3dc]"></a>luaL_tolstring</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = luaL_tolstring &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[359]"></a>luaL_traceback</STRONG> (Thumb, 416 bytes, Stack size 240 bytes, lauxlib.o(i.luaL_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaL_traceback &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
</UL>

<P><STRONG><a name="[3d2]"></a>luaL_where</STRONG> (Thumb, 58 bytes, Stack size 112 bytes, lauxlib.o(i.luaL_where))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaL_where &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>

<P><STRONG><a name="[2f3]"></a>luaM_growaux_</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, lmem.o(i.luaM_growaux_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[1f9]"></a>luaM_realloc_</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lmem.o(i.luaM_realloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1f8]"></a>luaM_toobig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmem.o(i.luaM_toobig))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[32a]"></a>luaO_arith</STRONG> (Thumb, 614 bytes, Stack size 40 bytes, lobject.o(i.luaO_arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = luaO_arith &rArr; luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeexpval
</UL>

<P><STRONG><a name="[414]"></a>luaO_ceillog2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lobject.o(i.luaO_ceillog2))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[404]"></a>luaO_chunkid</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lobject.o(i.luaO_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaO_chunkid &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
</UL>

<P><STRONG><a name="[451]"></a>luaO_fb2int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lobject.o(i.luaO_fb2int))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3cf]"></a>luaO_hexavalue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lobject.o(i.luaO_hexavalue))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[333]"></a>luaO_int2fb</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lobject.o(i.luaO_int2fb))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[1f3]"></a>luaO_pushfstring</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, lobject.o(i.luaO_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>

<P><STRONG><a name="[40b]"></a>luaO_pushvfstring</STRONG> (Thumb, 652 bytes, Stack size 96 bytes, lobject.o(i.luaO_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + In Cycle
<LI>Call Chain = luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[443]"></a>luaO_str2num</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lobject.o(i.luaO_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[445]"></a>luaO_tostring</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, lobject.o(i.luaO_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[3d0]"></a>luaO_utf8esc</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, lobject.o(i.luaO_utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[52f]"></a>luaS_clearcache</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lstring.o(i.luaS_clearcache))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[1fd]"></a>luaS_createlngstrobj</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lstring.o(i.luaS_createlngstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = luaS_createlngstrobj &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[446]"></a>luaS_eqlngstr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lstring.o(i.luaS_eqlngstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>

<P><STRONG><a name="[50e]"></a>luaS_hash</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, lstring.o(i.luaS_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>

<P><STRONG><a name="[50d]"></a>luaS_hashlongstr</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lstring.o(i.luaS_hashlongstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_hashlongstr
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[376]"></a>luaS_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lstring.o(i.luaS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaS_init &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[3c8]"></a>luaS_new</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lstring.o(i.luaS_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[1fc]"></a>luaS_newlstr</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, lstring.o(i.luaS_newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[449]"></a>luaS_newudata</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lstring.o(i.luaS_newudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>

<P><STRONG><a name="[536]"></a>luaS_remove</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lstring.o(i.luaS_remove))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[447]"></a>luaS_resize</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lstring.o(i.luaS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[44a]"></a>luaT_callTM</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ltm.o(i.luaT_callTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + In Cycle
<LI>Call Chain = luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[44b]"></a>luaT_callbinTM</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, ltm.o(i.luaT_callbinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = luaT_callbinTM &rArr; luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[44d]"></a>luaT_callorderTM</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ltm.o(i.luaT_callorderTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaT_callorderTM &rArr;  luaT_callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3e1]"></a>luaT_gettm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltm.o(i.luaT_gettm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaT_gettm
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3e4]"></a>luaT_gettmbyobj</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ltm.o(i.luaT_gettmbyobj))
<BR><BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[377]"></a>luaT_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ltm.o(i.luaT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = luaT_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[440]"></a>luaT_trybinTM</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ltm.o(i.luaT_trybinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = luaT_trybinTM &rArr; luaT_callbinTM &rArr; luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[44e]"></a>luaU_dump</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, ldump.o(i.luaU_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = luaU_dump &rArr; DumpFunction &rArr; DumpString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>

<P><STRONG><a name="[37a]"></a>luaU_undump</STRONG> (Thumb, 680 bytes, Stack size 48 bytes, lundump.o(i.luaU_undump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = luaU_undump &rArr; LoadFunction &rArr; LoadString &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[441]"></a>luaV_concat</STRONG> (Thumb, 544 bytes, Stack size 136 bytes, lvm.o(i.luaV_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[43d]"></a>luaV_div</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lvm.o(i.luaV_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = luaV_div &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[2f2]"></a>luaV_equalobj</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, lvm.o(i.luaV_equalobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = luaV_equalobj &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3f0]"></a>luaV_execute</STRONG> (Thumb, 5934 bytes, Stack size 64 bytes, lvm.o(i.luaV_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_fb2int
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[454]"></a>luaV_finishOp</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, lvm.o(i.luaV_finishOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = luaV_finishOp &rArr; luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[44f]"></a>luaV_finishget</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishget))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + In Cycle
<LI>Call Chain = luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[450]"></a>luaV_finishset</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, lvm.o(i.luaV_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + In Cycle
<LI>Call Chain = luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[453]"></a>luaV_lessequal</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, lvm.o(i.luaV_lessequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaV_lessequal &rArr; luaT_callorderTM &rArr;  luaT_callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[455]"></a>luaV_lessthan</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, lvm.o(i.luaV_lessthan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaV_lessthan &rArr; luaT_callorderTM &rArr;  luaT_callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[43c]"></a>luaV_mod</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lvm.o(i.luaV_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[456]"></a>luaV_objlen</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, lvm.o(i.luaV_objlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = luaV_objlen &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>

<P><STRONG><a name="[43e]"></a>luaV_shiftl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lvm.o(i.luaV_shiftl))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[329]"></a>luaV_tointeger</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lvm.o(i.luaV_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = luaV_tointeger &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeexpval
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[409]"></a>luaV_tonumber_</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lvm.o(i.luaV_tonumber_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = luaV_tonumber_ &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[378]"></a>luaX_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, llex.o(i.luaX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = luaX_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[331]"></a>luaX_lookahead</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llex.o(i.luaX_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_long_string &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[312]"></a>luaX_newstring</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, llex.o(i.luaX_newstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaX_newstring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2fc]"></a>luaX_next</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, llex.o(i.luaX_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaX_next &rArr; llex &rArr; read_long_string &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[457]"></a>luaX_setinput</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llex.o(i.luaX_setinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaX_setinput &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[2fa]"></a>luaX_syntaxerror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llex.o(i.luaX_syntaxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[2fb]"></a>luaX_token2str</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, llex.o(i.luaX_token2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[37b]"></a>luaY_parser</STRONG> (Thumb, 318 bytes, Stack size 192 bytes, lparser.o(i.luaY_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = luaY_parser &rArr; statlist &rArr; statement &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[36b]"></a>luaZ_fill</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lzio.o(i.luaZ_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[45c]"></a>luaZ_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lzio.o(i.luaZ_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[1f2]"></a>luaZ_read</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lzio.o(i.luaZ_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaZ_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>

<P><STRONG><a name="[42f]"></a>lua_absindex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lapi.o(i.lua_absindex))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
</UL>

<P><STRONG><a name="[435]"></a>lua_atpanic</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lapi.o(i.lua_atpanic))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[30b]"></a>lua_callk</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lapi.o(i.lua_callk))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lua_callk &rArr; luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[341]"></a>lua_checkstack</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lapi.o(i.lua_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lua_checkstack &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[2c2]"></a>lua_close</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lstate.o(i.lua_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lua_close &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::~LuaScript()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
</UL>

<P><STRONG><a name="[30f]"></a>lua_compare</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lapi.o(i.lua_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lua_compare &rArr; luaV_equalobj &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[386]"></a>lua_concat</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lapi.o(i.lua_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = lua_concat &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[39f]"></a>lua_copy</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lapi.o(i.lua_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_copy &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
</UL>

<P><STRONG><a name="[34a]"></a>lua_createtable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lapi.o(i.lua_createtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lua_createtable &rArr; luaH_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[45a]"></a>lua_dump</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lua_dump &rArr; luaU_dump &rArr; DumpFunction &rArr; DumpString
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[229]"></a>lua_error</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lapi.o(i.lua_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lua_error &rArr; luaG_errormsg &rArr; luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalWrite(lua_State*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalRead(lua_State*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogWrite(lua_State*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogRead(lua_State*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_togglePin(lua_State*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_delay(lua_State*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>

<P><STRONG><a name="[3d6]"></a>lua_gc</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lapi.o(i.lua_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lua_gc &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[318]"></a>lua_getallocf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_getallocf))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boxgc
</UL>

<P><STRONG><a name="[3a3]"></a>lua_getfield</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lapi.o(i.lua_getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = lua_getfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
</UL>

<P><STRONG><a name="[3da]"></a>lua_getglobal</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lapi.o(i.lua_getglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = lua_getglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[33e]"></a>lua_gethook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethook))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[345]"></a>lua_gethookcount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookcount))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[33d]"></a>lua_gethookmask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookmask))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[308]"></a>lua_geti</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lapi.o(i.lua_geti))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lua_geti &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[349]"></a>lua_getinfo</STRONG> (Thumb, 776 bytes, Stack size 48 bytes, ldebug.o(i.lua_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lua_getinfo &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[34e]"></a>lua_getlocal</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, ldebug.o(i.lua_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lua_getlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
</UL>

<P><STRONG><a name="[321]"></a>lua_getmetatable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lapi.o(i.lua_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_getmetatable
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[347]"></a>lua_getstack</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ldebug.o(i.lua_getstack))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[45b]"></a>lua_gettable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lapi.o(i.lua_gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lua_gettable &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[227]"></a>lua_gettop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_gettop))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalWrite(lua_State*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalRead(lua_State*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogWrite(lua_State*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogRead(lua_State*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_togglePin(lua_State*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_delay(lua_State*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[351]"></a>lua_getupvalue</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lapi.o(i.lua_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_getupvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
</UL>

<P><STRONG><a name="[352]"></a>lua_getuservalue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lapi.o(i.lua_getuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_getuservalue
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
</UL>

<P><STRONG><a name="[35c]"></a>lua_iscfunction</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_iscfunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_iscfunction
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[22a]"></a>lua_isinteger</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lapi.o(i.lua_isinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_isinteger
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalWrite(lua_State*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalRead(lua_State*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogWrite(lua_State*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogRead(lua_State*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_togglePin(lua_State*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_delay(lua_State*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
</UL>

<P><STRONG><a name="[429]"></a>lua_isnumber</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lapi.o(i.lua_isnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[22b]"></a>lua_isstring</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lapi.o(i.lua_isstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_isstring
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[3df]"></a>lua_isyieldable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ldo.o(i.lua_isyieldable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
</UL>

<P><STRONG><a name="[433]"></a>lua_len</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.lua_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lua_len &rArr; luaV_objlen &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>

<P><STRONG><a name="[3d9]"></a>lua_load</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lapi.o(i.lua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
</UL>

<P><STRONG><a name="[f4]"></a>lua_newstate</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lstate.o(i.lua_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lua_newstate &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.makeseed)
</UL>
<P><STRONG><a name="[3d5]"></a>lua_newthread</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, lstate.o(i.lua_newthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lua_newthread &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>

<P><STRONG><a name="[3a7]"></a>lua_newuserdata</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lapi.o(i.lua_newuserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[384]"></a>lua_next</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lapi.o(i.lua_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = lua_next &rArr; luaH_next &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[2c1]"></a>lua_pcallk</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lapi.o(i.lua_pcallk))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lua_pcallk &rArr; luaD_call &rArr;  luaV_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::doString(const char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>

<P><STRONG><a name="[34d]"></a>lua_pushboolean</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lapi.o(i.lua_pushboolean))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
</UL>

<P><STRONG><a name="[2bc]"></a>lua_pushcclosure</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lapi.o(i.lua_pushcclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lua_pushcclosure &rArr; luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::registerFunc(const char*, int(*)(lua_State*))
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[348]"></a>lua_pushfstring</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lapi.o(i.lua_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[31f]"></a>lua_pushinteger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_pushinteger))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
</UL>

<P><STRONG><a name="[35b]"></a>lua_pushlightuserdata</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_pushlightuserdata))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[432]"></a>lua_pushlstring</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lapi.o(i.lua_pushlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = lua_pushlstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
</UL>

<P><STRONG><a name="[31e]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnil))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[221]"></a>lua_pushnumber</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnumber))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalRead(lua_State*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogRead(lua_State*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_millis(lua_State*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_micros(lua_State*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[228]"></a>lua_pushstring</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lapi.o(i.lua_pushstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalWrite(lua_State*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalRead(lua_State*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogWrite(lua_State*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogRead(lua_State*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_togglePin(lua_State*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_delay(lua_State*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[342]"></a>lua_pushthread</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lapi.o(i.lua_pushthread))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
</UL>

<P><STRONG><a name="[30a]"></a>lua_pushvalue</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lapi.o(i.lua_pushvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getregistry
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[42d]"></a>lua_pushvfstring</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[385]"></a>lua_rawequal</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lapi.o(i.lua_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lua_rawequal &rArr; luaV_equalobj &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[322]"></a>lua_rawget</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lapi.o(i.lua_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; luaV_equalobj &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[39e]"></a>lua_rawgeti</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(i.lua_rawgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_rawgeti
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
</UL>

<P><STRONG><a name="[340]"></a>lua_rawgetp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lapi.o(i.lua_rawgetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lua_rawgetp &rArr; luaH_get &rArr; luaV_equalobj &rArr; luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[39c]"></a>lua_rawlen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lapi.o(i.lua_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_rawlen &rArr; luaH_getn
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[355]"></a>lua_rawset</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lapi.o(i.lua_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lua_rawset &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
</UL>

<P><STRONG><a name="[45e]"></a>lua_rawseti</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lapi.o(i.lua_rawseti))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lua_rawseti &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[353]"></a>lua_rawsetp</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lapi.o(i.lua_rawsetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lua_rawsetp &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[3d4]"></a>lua_resume</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, ldo.o(i.lua_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = lua_resume &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[344]"></a>lua_rotate</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lapi.o(i.lua_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lua_rotate
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[34c]"></a>lua_setfield</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lapi.o(i.lua_setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = lua_setfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[2bd]"></a>lua_setglobal</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lapi.o(i.lua_setglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = lua_setglobal &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::registerFunc(const char*, int(*)(lua_State*))
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[242]"></a>lua_sethook</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ldebug.o(i.lua_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lua_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::~LuaScript()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakCallback(lua_State*, lua_Debug*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::end()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[30e]"></a>lua_seti</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lapi.o(i.lua_seti))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lua_seti &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[356]"></a>lua_setlocal</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ldebug.o(i.lua_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lua_setlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
</UL>

<P><STRONG><a name="[354]"></a>lua_setmetatable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lapi.o(i.lua_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lua_setmetatable &rArr; luaC_checkfinalizer &rArr; sweeplist &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[30d]"></a>lua_settop</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lapi.o(i.lua_settop))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[357]"></a>lua_setupvalue</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lapi.o(i.lua_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_setupvalue &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[358]"></a>lua_setuservalue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lapi.o(i.lua_setuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lua_setuservalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
</UL>

<P><STRONG><a name="[3d3]"></a>lua_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lapi.o(i.lua_status))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[3db]"></a>lua_string_print</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, luascript.o(i.lua_string_print))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[39b]"></a>lua_stringtonumber</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lapi.o(i.lua_stringtonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lua_stringtonumber &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[30c]"></a>lua_toboolean</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lapi.o(i.lua_toboolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_toboolean
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[380]"></a>lua_tointegerx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lapi.o(i.lua_tointegerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lua_tointegerx &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
</UL>

<P><STRONG><a name="[22d]"></a>lua_tolstring</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lapi.o(i.lua_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::doString(const char*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[22c]"></a>lua_tonumberx</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lapi.o(i.lua_tonumberx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalWrite(lua_State*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_digitalRead(lua_State*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogWrite(lua_State*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_analogRead(lua_State*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_togglePin(lua_State*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_delay(lua_State*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[43b]"></a>lua_topointer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lapi.o(i.lua_topointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_topointer
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[33f]"></a>lua_tothread</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lapi.o(i.lua_tothread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_tothread
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[319]"></a>lua_touserdata</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lapi.o(i.lua_touserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_touserdata
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boxgc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[309]"></a>lua_type</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lapi.o(i.lua_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_type
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[3dd]"></a>lua_typename</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lapi.o(i.lua_typename))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[35a]"></a>lua_upvalueid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lapi.o(i.lua_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_upvalueid
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[35d]"></a>lua_upvaluejoin</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lapi.o(i.lua_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lua_upvaluejoin &rArr; luaC_upvdeccount &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[379]"></a>lua_version</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(i.lua_version))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[343]"></a>lua_xmove</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lapi.o(i.lua_xmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[3de]"></a>lua_yieldk</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ldo.o(i.lua_yieldk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = lua_yieldk &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
</UL>

<P><STRONG><a name="[125]"></a>luaopen_base</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lbaselib.o(i.luaopen_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_base &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>luaopen_coroutine</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcorolib.o(i.luaopen_coroutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_coroutine &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>luaopen_debug</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ldblib.o(i.luaopen_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_debug &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>luaopen_io</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, liolib.o(i.luaopen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = luaopen_io &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>luaopen_math</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lmathlib.o(i.luaopen_math))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_math &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>luaopen_os</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, loslib.o(i.luaopen_os))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_os &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>luaopen_package</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, loadlib.o(i.luaopen_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 9928<LI>Call Chain = luaopen_package &rArr; luaL_gsub &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>luaopen_string</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lstrlib.o(i.luaopen_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_string &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>luaopen_table</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ltablib.o(i.luaopen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_table &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>luaopen_utf8</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lutf8lib.o(i.luaopen_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaopen_utf8 &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[45f]"></a>lv_anim_core_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_anim.o(i.lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_anim_core_init &rArr; lv_task_create &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[266]"></a>lv_anim_create</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_anim.o(i.lv_anim_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_start_edge_flash
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[361]"></a>lv_anim_del</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lv_anim.o(i.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[a0]"></a>lv_anim_path_linear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_path_linear))
<BR>[Address Reference Count : 7]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_tabview.o(i.lv_tabview_set_tab_act)
<LI> page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
<LI> page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th)
<LI> lv_page.o(i.lv_page_scroll_ver)
<LI> lv_page.o(i.lv_page_signal)
<LI> lv_page.o(i.lv_page_start_edge_flash)
</UL>
<P><STRONG><a name="[ea]"></a>lv_anim_path_step</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_path_step))
<BR>[Address Reference Count : 5]<UL><LI> lv_ta.o(i.lv_ta_add_char)
<LI> lv_ta.o(i.lv_ta_add_text)
<LI> lv_ta.o(i.lv_ta_create)
<LI> lv_ta.o(i.lv_ta_set_cursor_pos)
<LI> lv_ta.o(i.lv_ta_set_text)
</UL>
<P><STRONG><a name="[4e3]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[494]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[49e]"></a>lv_area_intersect</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
</UL>

<P><STRONG><a name="[4a9]"></a>lv_area_is_in</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_is_in))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[492]"></a>lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[3be]"></a>lv_area_is_point_on</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_is_point_on))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
</UL>

<P><STRONG><a name="[493]"></a>lv_area_join</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_join))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[47c]"></a>lv_area_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
</UL>

<P><STRONG><a name="[4fd]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[4fc]"></a>lv_area_set_pos</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, lv_area.o(i.lv_area_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_area_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[4fb]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[463]"></a>lv_btnm_clear_btn_ctrl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_btnm.o(i.lv_btnm_clear_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_btnm_clear_btn_ctrl &rArr; invalidate_button_area &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
</UL>

<P><STRONG><a name="[464]"></a>lv_btnm_clear_btn_ctrl_all</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_btnm.o(i.lv_btnm_clear_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_btnm_clear_btn_ctrl_all &rArr; invalidate_button_area &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_event_cb
</UL>

<P><STRONG><a name="[465]"></a>lv_btnm_create</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, lv_btnm.o(i.lv_btnm_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_btnm_create &rArr; lv_btnm_set_map &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_style
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
</UL>

<P><STRONG><a name="[476]"></a>lv_btnm_get_active_btn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_btnm.o(i.lv_btnm_get_active_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_btnm_get_active_btn
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_event_cb
</UL>

<P><STRONG><a name="[477]"></a>lv_btnm_get_active_btn_text</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lv_btnm.o(i.lv_btnm_get_active_btn_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_btnm_get_active_btn_text &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
</UL>

<P><STRONG><a name="[478]"></a>lv_btnm_get_btn_ctrl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_btnm.o(i.lv_btnm_get_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_btnm_get_btn_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
</UL>

<P><STRONG><a name="[472]"></a>lv_btnm_get_style</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_btnm.o(i.lv_btnm_get_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_btnm_get_style &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
</UL>

<P><STRONG><a name="[479]"></a>lv_btnm_set_btn_ctrl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_btnm.o(i.lv_btnm_set_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_btnm_set_btn_ctrl &rArr; invalidate_button_area &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_event_cb
</UL>

<P><STRONG><a name="[47a]"></a>lv_btnm_set_ctrl_map</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_btnm.o(i.lv_btnm_set_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_btnm_set_ctrl_map &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
</UL>

<P><STRONG><a name="[46c]"></a>lv_btnm_set_map</STRONG> (Thumb, 670 bytes, Stack size 72 bytes, lv_btnm.o(i.lv_btnm_set_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_btnm_set_map &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
</UL>

<P><STRONG><a name="[46e]"></a>lv_btnm_set_style</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_btnm.o(i.lv_btnm_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_btnm_set_style &rArr; lv_obj_set_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_set_style
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
</UL>

<P><STRONG><a name="[4ac]"></a>lv_circ_cont</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_circ.o(i.lv_circ_cont))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
</UL>

<P><STRONG><a name="[4ab]"></a>lv_circ_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_circ.o(i.lv_circ_init))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[4ad]"></a>lv_circ_next</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lv_circ.o(i.lv_circ_next))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[483]"></a>lv_cont_create</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_cont_create &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
</UL>

<P><STRONG><a name="[485]"></a>lv_cont_get_fit_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_cont.o(i.lv_cont_get_fit_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cont_get_fit_left
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[486]"></a>lv_cont_get_fit_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_cont.o(i.lv_cont_get_fit_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_cont_get_fit_top
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[48f]"></a>lv_cont_set_fit4</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_set_fit4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_cont_set_fit4 &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[490]"></a>lv_cont_set_layout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_cont.o(i.lv_cont_set_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_cont_set_layout
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
</UL>

<P><STRONG><a name="[23c]"></a>lv_disp_buf_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_init()
</UL>

<P><STRONG><a name="[23d]"></a>lv_disp_drv_init</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_init()
</UL>

<P><STRONG><a name="[23e]"></a>lv_disp_drv_register</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_disp_drv_register &rArr; lv_task_create &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_init()
</UL>

<P><STRONG><a name="[245]"></a>lv_disp_flush_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_disp_flush(_disp_drv_t*, const lv_area_t*, lv_color16_t*)
</UL>

<P><STRONG><a name="[49c]"></a>lv_disp_get_antialiasing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_antialiasing))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
</UL>

<P><STRONG><a name="[496]"></a>lv_disp_get_buf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_buf))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[264]"></a>lv_disp_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[267]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[3b4]"></a>lv_disp_get_inv_buf_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_inv_buf_size))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3ad]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3af]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[269]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[265]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[498]"></a>lv_disp_is_double_buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_is_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[495]"></a>lv_disp_is_true_double_buf</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_is_true_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[3b7]"></a>lv_disp_pop_from_inv_buf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_pop_from_inv_buf))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[cc]"></a>lv_disp_refr_task</STRONG> (Thumb, 1002 bytes, Stack size 48 bytes, lv_refr.o(i.lv_disp_refr_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_disp_refr_task &rArr; lv_refr_area_part &rArr; lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_free_buf
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_join
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_on
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[4b1]"></a>lv_draw_aa_get_opa</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lv_draw.o(i.lv_draw_aa_get_opa))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[49d]"></a>lv_draw_fill</STRONG> (Thumb, 552 bytes, Stack size 104 bytes, lv_draw_basic.o(i.lv_draw_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_draw_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[499]"></a>lv_draw_free_buf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_draw.o(i.lv_draw_free_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_draw_free_buf &rArr; lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[4a0]"></a>lv_draw_get_buf</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_draw.o(i.lv_draw_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
</UL>

<P><STRONG><a name="[475]"></a>lv_draw_label</STRONG> (Thumb, 1504 bytes, Stack size 192 bytes, lv_draw_label.o(i.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[4a5]"></a>lv_draw_letter</STRONG> (Thumb, 878 bytes, Stack size 176 bytes, lv_draw_basic.o(i.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_draw_letter
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[4a8]"></a>lv_draw_px</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lv_draw_basic.o(i.lv_draw_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_draw_px &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[473]"></a>lv_draw_rect</STRONG> (Thumb, 2308 bytes, Stack size 168 bytes, lv_draw_rect.o(i.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_cont
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_on
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[50a]"></a>lv_event_get_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_event_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrl_def_event_cb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
</UL>

<P><STRONG><a name="[360]"></a>lv_event_send</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lv_obj.o(i.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = lv_event_send &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrl_def_event_cb
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_event_cb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>

<P><STRONG><a name="[1f]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_roboto_16.o(.data)
</UL>
<P><STRONG><a name="[4a7]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_font.o(i.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[4a6]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_font.o(i.lv_font_get_glyph_dsc))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[1e]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_utils_bsearch
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_roboto_16.o(.data)
</UL>
<P><STRONG><a name="[4a4]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_font.o(i.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>

<P><STRONG><a name="[4b2]"></a>lv_fs_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_fs_close &rArr; lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[251]"></a>lv_fs_drv_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_drv_init))
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_fs_init()
</UL>

<P><STRONG><a name="[252]"></a>lv_fs_drv_register</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_fs_drv_register &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_fs_init()
</UL>

<P><STRONG><a name="[4b4]"></a>lv_fs_get_ext</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_get_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[4b5]"></a>lv_fs_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[4b6]"></a>lv_fs_open</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lv_fs.o(i.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_fs_open &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[4c3]"></a>lv_fs_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[4c6]"></a>lv_fs_seek</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[4b7]"></a>lv_group_add_obj</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_group_add_obj &rArr; lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[4ba]"></a>lv_group_focus_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[3bb]"></a>lv_group_focus_obj</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_group_focus_obj &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
</UL>

<P><STRONG><a name="[4bb]"></a>lv_group_focus_prev</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[3ba]"></a>lv_group_get_click_focus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_click_focus))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
</UL>

<P><STRONG><a name="[482]"></a>lv_group_get_editing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[481]"></a>lv_group_get_focused</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
</UL>

<P><STRONG><a name="[4bc]"></a>lv_group_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[4bd]"></a>lv_group_mod_style</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_mod_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
</UL>

<P><STRONG><a name="[35f]"></a>lv_group_remove_obj</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_group_remove_obj &rArr; focus_next_core &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
</UL>

<P><STRONG><a name="[4be]"></a>lv_group_send_data</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[4bf]"></a>lv_group_set_editing</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[4c0]"></a>lv_img_cache_set_size</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lv_img_cache.o(i.lv_img_cache_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_img_cache_set_size &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[4c5]"></a>lv_img_color_format_get_px_size</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_color_format_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[d6]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[d3]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[d4]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_color_format_get_px_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[d5]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 880 bytes, Stack size 424 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_color_format_get_px_size
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i.lv_img_decoder_init)
</UL>
<P><STRONG><a name="[4c1]"></a>lv_img_decoder_close</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_close))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
</UL>

<P><STRONG><a name="[4c7]"></a>lv_img_decoder_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_img_decoder_init &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[4c2]"></a>lv_img_src_get_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[23f]"></a>lv_indev_drv_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_hal_indev.o(i.lv_indev_drv_init))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_init()
</UL>

<P><STRONG><a name="[240]"></a>lv_indev_drv_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_hal_indev.o(i.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_indev_drv_register &rArr; lv_task_create &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_init()
</UL>

<P><STRONG><a name="[47d]"></a>lv_indev_get_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[362]"></a>lv_indev_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_indev.o(i.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_init
</UL>

<P><STRONG><a name="[364]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
</UL>

<P><STRONG><a name="[47f]"></a>lv_indev_get_point</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[47e]"></a>lv_indev_get_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[4ff]"></a>lv_indev_get_vect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[4c8]"></a>lv_indev_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_indev.o(i.lv_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[4fa]"></a>lv_indev_is_dragging</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_is_dragging))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>

<P><STRONG><a name="[4c9]"></a>lv_indev_read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[d7]"></a>lv_indev_read_task</STRONG> (Thumb, 2192 bytes, Stack size 56 bytes, lv_indev.o(i.lv_indev_read_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_indev_read_task &rArr; indev_proc_press &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_is_empty
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(i.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[363]"></a>lv_indev_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_indev.o(i.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
</UL>

<P><STRONG><a name="[480]"></a>lv_indev_reset_long_press</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_indev.o(i.lv_indev_reset_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_reset_long_press
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
</UL>

<P><STRONG><a name="[23b]"></a>lv_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_obj.o(i.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_init &rArr; lv_anim_core_init &rArr; lv_task_create &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_core_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_init
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_user_init()
</UL>

<P><STRONG><a name="[339]"></a>lv_inv_area</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lv_refr.o(i.lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
</UL>

<P><STRONG><a name="[278]"></a>lv_kb_create</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, lv_kb.o(i.lv_kb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_kb_create &rArr; lv_btnm_create &rArr; lv_btnm_set_map &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height_fit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_ctrl_map
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_set_style
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[d9]"></a>lv_kb_def_event_cb</STRONG> (Thumb, 608 bytes, Stack size 24 bytes, lv_kb.o(i.lv_kb_def_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lv_kb_def_event_cb &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_ctrl_map
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_btn_ctrl
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_active_btn_text
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_active_btn
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_type
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_right
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_left
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_kb.o(i.lv_kb_create)
<LI> lv_kb.o(i.lv_kb_def_event_cb)
</UL>
<P><STRONG><a name="[27d]"></a>lv_kb_set_style</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_kb.o(i.lv_kb_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_kb_set_style &rArr; lv_btnm_set_style &rArr; lv_obj_set_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_style
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[27c]"></a>lv_kb_set_ta</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_kb.o(i.lv_kb_set_ta))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_kb_set_ta &rArr; lv_ta_set_cursor_type &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_type
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[4d5]"></a>lv_label_create</STRONG> (Thumb, 832 bytes, Stack size 40 bytes, lv_label.o(i.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_get_size
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[4dc]"></a>lv_label_get_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_align
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[4dd]"></a>lv_label_get_letter_on</STRONG> (Thumb, 340 bytes, Stack size 104 bytes, lv_label.o(i.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_label_get_letter_on &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[4df]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, lv_label.o(i.lv_label_get_letter_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[4e0]"></a>lv_label_get_text</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_label_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[4e1]"></a>lv_label_ins_text</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_ins_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_label_ins_text &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[4e5]"></a>lv_label_set_long_mode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[4d9]"></a>lv_label_set_text</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[4e6]"></a>lv_ll_chg_list</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lv_ll.o(i.lv_ll_chg_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_ll_chg_list &rArr; lv_ll_rem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
</UL>

<P><STRONG><a name="[d0]"></a>lv_ll_get_head</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
<LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[cf]"></a>lv_ll_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
<LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[d1]"></a>lv_ll_get_prev</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_back
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
<LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[d2]"></a>lv_ll_get_tail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_back
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
<LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[460]"></a>lv_ll_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_core_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_init
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[462]"></a>lv_ll_ins_head</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_ll.o(i.lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[4e7]"></a>lv_ll_ins_prev</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lv_ll.o(i.lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[4b9]"></a>lv_ll_ins_tail</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_ll.o(i.lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[488]"></a>lv_ll_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_ll.o(i.lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[4e8]"></a>lv_ll_move_before</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lv_ll.o(i.lv_ll_move_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_ll_move_before &rArr; lv_ll_rem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[2f6]"></a>lv_ll_rem</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, lv_ll.o(i.lv_ll_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_ll_rem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[47b]"></a>lv_mem_alloc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
</UL>

<P><STRONG><a name="[2f7]"></a>lv_mem_free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_free_buf
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[4db]"></a>lv_mem_get_size</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[4ca]"></a>lv_mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[4a1]"></a>lv_mem_realloc</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lv_mem.o(i.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>

<P><STRONG><a name="[27b]"></a>lv_obj_align</STRONG> (Thumb, 872 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[4eb]"></a>lv_obj_align_origo</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_align_origo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>

<P><STRONG><a name="[468]"></a>lv_obj_allocate_ext_attr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_allocate_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_allocate_ext_attr &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[48e]"></a>lv_obj_clear_protect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_clear_protect))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[466]"></a>lv_obj_create</STRONG> (Thumb, 590 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_create &rArr; lv_group_add_obj &rArr; lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
</UL>

<P><STRONG><a name="[25e]"></a>lv_obj_del</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hide_anim_end(_lv_anim_t*)
</UL>

<P><STRONG><a name="[489]"></a>lv_obj_get_auto_realign</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_auto_realign))
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[48c]"></a>lv_obj_get_child</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_child))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
</UL>

<P><STRONG><a name="[4ec]"></a>lv_obj_get_child_back</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_child_back))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
</UL>

<P><STRONG><a name="[3bf]"></a>lv_obj_get_click</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_click))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
</UL>

<P><STRONG><a name="[3bd]"></a>lv_obj_get_coords</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_coords))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_on_edge
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[469]"></a>lv_obj_get_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[338]"></a>lv_obj_get_disp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
</UL>

<P><STRONG><a name="[3b2]"></a>lv_obj_get_drag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3b3]"></a>lv_obj_get_drag_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_dir))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3b1]"></a>lv_obj_get_drag_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_parent))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[3bc]"></a>lv_obj_get_drag_throw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_throw))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
</UL>

<P><STRONG><a name="[337]"></a>lv_obj_get_ext_attr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_ext_attr))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_style
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_ctrl_map
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_btn_ctrl
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_style
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_btn_ctrl
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_active_btn_text
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_active_btn
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_clear_btn_ctrl_all
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_clear_btn_ctrl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_top
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_left
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_type
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_pos
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_right
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_left
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_set_ta
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_signal
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_start_edge_flash
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_edge_flash
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_on_edge
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_edge_flash
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim_end
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_event_cb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[3b9]"></a>lv_obj_get_group</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[271]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[279]"></a>lv_obj_get_height_fit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_height_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_obj_get_height_fit &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[38c]"></a>lv_obj_get_hidden</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_hidden))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[471]"></a>lv_obj_get_opa_scale</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_opa_scale))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[277]"></a>lv_obj_get_parent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrl_def_event_cb
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_event_cb
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[467]"></a>lv_obj_get_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[470]"></a>lv_obj_get_style</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height_fit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_style
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_on_edge
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
</UL>

<P><STRONG><a name="[273]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[27a]"></a>lv_obj_get_width_fit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_width_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_obj_get_width_fit &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[3b5]"></a>lv_obj_get_x</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_x))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
</UL>

<P><STRONG><a name="[263]"></a>lv_obj_get_y</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_y))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[368]"></a>lv_obj_invalidate</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_hidden
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_style
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim_end
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_flash_anim
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
</UL>

<P><STRONG><a name="[4b8]"></a>lv_obj_is_focused</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_is_focused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_is_focused
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[3b0]"></a>lv_obj_is_protected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_is_protected))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[38d]"></a>lv_obj_move_foreground</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_move_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[48a]"></a>lv_obj_realign</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_realign &rArr; lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[4da]"></a>lv_obj_refresh_ext_draw_pad</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_refresh_ext_draw_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_refresh_ext_draw_pad &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
</UL>

<P><STRONG><a name="[484]"></a>lv_obj_refresh_style</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_refresh_style &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[4d6]"></a>lv_obj_set_click</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_click))
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[46b]"></a>lv_obj_set_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[4f5]"></a>lv_obj_set_drag</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_drag))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
</UL>

<P><STRONG><a name="[4f6]"></a>lv_obj_set_drag_throw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_drag_throw))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[275]"></a>lv_obj_set_event_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_event_cb))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[4e4]"></a>lv_obj_set_height</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
</UL>

<P><STRONG><a name="[4ed]"></a>lv_obj_set_hidden</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_hidden))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_set_hidden &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
</UL>

<P><STRONG><a name="[4ee]"></a>lv_obj_set_parent</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_set_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_set_parent &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_chg_list
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[3b6]"></a>lv_obj_set_pos</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
</UL>

<P><STRONG><a name="[48d]"></a>lv_obj_set_protect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_protect))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
</UL>

<P><STRONG><a name="[46a]"></a>lv_obj_set_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[26b]"></a>lv_obj_set_size</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_origo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_area_event_handler(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[46f]"></a>lv_obj_set_style</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_set_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_style
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
</UL>

<P><STRONG><a name="[4f1]"></a>lv_obj_set_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_size &rArr; lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>

<P><STRONG><a name="[dc]"></a>lv_obj_set_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_tabview.o(i.lv_tabview_set_tab_act)
<LI> lv_label.o(i.lv_label_set_long_mode)
<LI> lv_label.o(i.lv_label_create)
<LI> lv_page.o(i.lv_page_signal)
</UL>
<P><STRONG><a name="[9f]"></a>lv_obj_set_y</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
</UL>
<BR>[Address Reference Count : 6]<UL><LI> lv_tabview.o(i.lv_tabview_set_tab_act)
<LI> lv_label.o(i.lv_label_set_long_mode)
<LI> page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
<LI> page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th)
<LI> lv_label.o(i.lv_label_create)
<LI> lv_page.o(i.lv_page_scroll_ver)
</UL>
<P><STRONG><a name="[4f2]"></a>lv_page_create</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, lv_page.o(i.lv_page_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_page_create &rArr; lv_cont_create &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_drag_throw
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_drag
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[4f7]"></a>lv_page_get_edge_flash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_page.o(i.lv_page_get_edge_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_page_get_edge_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[4f8]"></a>lv_page_get_fit_width</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_page.o(i.lv_page_get_fit_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_page_get_fit_width &rArr; lv_page_get_style &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
</UL>

<P><STRONG><a name="[272]"></a>lv_page_get_scrl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_page.o(i.lv_page_get_scrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_page_get_scrl
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[4f4]"></a>lv_page_get_style</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_page.o(i.lv_page_get_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_page_get_style &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
</UL>

<P><STRONG><a name="[4f9]"></a>lv_page_on_edge</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lv_page.o(i.lv_page_on_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_page_on_edge &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
</UL>

<P><STRONG><a name="[4fe]"></a>lv_page_scroll_ver</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, lv_page.o(i.lv_page_scroll_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_page_scroll_ver &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[501]"></a>lv_page_set_edge_flash</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_page.o(i.lv_page_set_edge_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_page_set_edge_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[26f]"></a>lv_page_set_sb_mode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_page.o(i.lv_page_set_sb_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_page_set_sb_mode &rArr; lv_page_sb_refresh &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[26e]"></a>lv_page_set_style</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lv_page.o(i.lv_page_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_page_set_style &rArr; lv_page_sb_refresh &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[500]"></a>lv_page_start_edge_flash</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, lv_page.o(i.lv_page_start_edge_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_page_start_edge_flash &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>

<P><STRONG><a name="[49b]"></a>lv_refr_get_disp_refreshing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(i.lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
</UL>

<P><STRONG><a name="[4cd]"></a>lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(i.lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[268]"></a>lv_style_copy</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, lv_style.o(i.lv_style_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_style_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[4cc]"></a>lv_style_init</STRONG> (Thumb, 2126 bytes, Stack size 40 bytes, lv_style.o(i.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_style_init &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[4d0]"></a>lv_ta_add_char</STRONG> (Thumb, 526 bytes, Stack size 88 bytes, lv_ta.o(i.lv_ta_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_edge_flash
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_edge_flash
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>

<P><STRONG><a name="[253]"></a>lv_ta_add_text</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, lv_ta.o(i.lv_ta_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + In Cycle
<LI>Call Chain = lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_ins
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_edge_flash
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_edge_flash
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaPrintCallback(const char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[270]"></a>lv_ta_create</STRONG> (Thumb, 538 bytes, Stack size 64 bytes, lv_ta.o(i.lv_ta_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_ta_create &rArr; lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[4d1]"></a>lv_ta_cursor_left</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_cursor_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_ta_cursor_left &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
</UL>

<P><STRONG><a name="[4d2]"></a>lv_ta_cursor_right</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_ta_cursor_right &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
</UL>

<P><STRONG><a name="[4d3]"></a>lv_ta_del_char</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lv_ta.o(i.lv_ta_del_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_ta_del_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_cut
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
</UL>

<P><STRONG><a name="[254]"></a>lv_ta_get_cursor_pos</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_get_cursor_pos
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaPrintCallback(const char*)
</UL>

<P><STRONG><a name="[4ce]"></a>lv_ta_get_cursor_type</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_cursor_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_get_cursor_type
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_set_ta
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_signal
</UL>

<P><STRONG><a name="[260]"></a>lv_ta_get_text</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_ta_get_text &rArr; lv_label_get_text
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[4d4]"></a>lv_ta_set_cursor_pos</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, lv_ta.o(i.lv_ta_set_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_right
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_cursor_left
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>

<P><STRONG><a name="[4cf]"></a>lv_ta_set_cursor_type</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_ta.o(i.lv_ta_set_cursor_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_ta_set_cursor_type &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_set_ta
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_signal
</UL>

<P><STRONG><a name="[506]"></a>lv_ta_set_one_line</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, lv_ta.o(i.lv_ta_set_one_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_ta_set_one_line &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[274]"></a>lv_ta_set_style</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_ta.o(i.lv_ta_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_ta_set_style &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[255]"></a>lv_ta_set_text</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, lv_ta.o(i.lv_ta_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeholder_update
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaPrintCallback(const char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[276]"></a>lv_ta_set_text_sel</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_ta.o(i.lv_ta_set_text_sel))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[26c]"></a>lv_tabview_add_tab</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, lv_tabview.o(i.lv_tabview_add_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_tabview_add_tab &rArr; tabview_realign &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_btn_ctrl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[26a]"></a>lv_tabview_create</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, lv_tabview.o(i.lv_tabview_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_tabview_create &rArr; lv_tabview_add_tab &rArr; tabview_realign &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height_fit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_back
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_current
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[26d]"></a>lv_tabview_set_style</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lv_tabview.o(i.lv_tabview_set_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_tabview_set_style &rArr; tabview_realign &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_style
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageCreat_LuaScript()
</UL>

<P><STRONG><a name="[261]"></a>lv_tabview_set_tab_act</STRONG> (Thumb, 524 bytes, Stack size 72 bytes, lv_tabview.o(i.lv_tabview_set_tab_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_btn_ctrl
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_clear_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_event_cb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_event_cb(_lv_obj_t*, unsigned char)
</UL>

<P><STRONG><a name="[4cb]"></a>lv_task_core_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[461]"></a>lv_task_create</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, lv_task.o(i.lv_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_task_create &rArr; lv_ll_ins_prev &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_tail
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_head
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_move_before
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_ins_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[238]"></a>lv_task_handler</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, lv_task.o(i.lv_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_task_handler &rArr; lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[491]"></a>lv_task_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[46d]"></a>lv_theme_get_current</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_get_current))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>

<P><STRONG><a name="[2f5]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(i.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[2f8]"></a>lv_tick_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_get))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_core_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[507]"></a>lv_txt_cut</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lv_txt.o(i.lv_txt_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_cut
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
</UL>

<P><STRONG><a name="[4a2]"></a>lv_txt_get_next_line</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, lv_txt.o(i.lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[474]"></a>lv_txt_get_size</STRONG> (Thumb, 658 bytes, Stack size 88 bytes, lv_txt.o(i.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_txt_get_size &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[4a3]"></a>lv_txt_get_width</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, lv_txt.o(i.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[4e2]"></a>lv_txt_ins</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_ins &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
</UL>

<P><STRONG><a name="[4de]"></a>lv_txt_is_cmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[3a1]"></a>lv_utils_bsearch</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lv_utils.o(i.lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[7e]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[220]"></a>micros</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, delay.o(i.micros))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_micros(lua_State*)
</UL>

<P><STRONG><a name="[222]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_millis(lua_State*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiAltDriver*, unsigned char, SPISettings)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[1ff]"></a>pinMode</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, arduino.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Register
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::begin()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_SetSdaMode(unsigned char)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_IIC_Init()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_pinMode(lua_State*)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiAltDriver::begin(unsigned char)
</UL>

<P><STRONG><a name="[4e9]"></a>pvPortMalloc</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[234]"></a>pwmWrite</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pwm.o(i.pwmWrite))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[54a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2a1]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>

<P><STRONG><a name="[2d3]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[310]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loslib.o(i.time))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[519]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[52c]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, displaybasic.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[539]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, displaybasic.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vApplicationStackOverflowHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCrashReports(const char*)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[54b]"></a>vApplicationTickHook</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, delay.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[544]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[549]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[51b]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[51a]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[51c]"></a>vPortEnterCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[51d]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[4ea]"></a>vPortFree</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[53b]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[54c]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[525]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[239]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dispaly(void*)
</UL>

<P><STRONG><a name="[546]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[529]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[53e]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[53d]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[247]"></a>vTaskResume</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScriptStart(const char*)
</UL>

<P><STRONG><a name="[281]"></a>vTaskStartScheduler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[24a]"></a>vTaskSuspend</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vTaskSuspend &rArr; vApplicationStackOverflowHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LuaScript(void*)
</UL>

<P><STRONG><a name="[522]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1ad]"></a>vTaskSwitchContext</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[540]"></a>xPortStartScheduler</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[543]"></a>xQueueGenericCreate</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[521]"></a>xQueueGenericSend</STRONG> (Thumb, 464 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[548]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[524]"></a>xQueueReceive</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[547]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[280]"></a>xTaskCreate</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[520]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[51f]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[204]"></a>xTaskIncrementTick</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[545]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[528]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[523]"></a>xTaskResumeAll</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[53f]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[526]"></a>xTimerGenericCommand</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a0]"></a>__sti___18_HardwareSerial_cpp_cfa1b6a6</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6))
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[1a1]"></a>__sti___8_Wire_cpp_928ee5ff</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wire.o(i.__sti___8_Wire_cpp_928ee5ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___8_Wire_cpp_928ee5ff &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[1a2]"></a>__sti___7_SPI_cpp_ce5662b4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(i.__sti___7_SPI_cpp_ce5662b4))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[1a3]"></a>__sti___12_ComBasic_cpp_nrf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, combasic.o(i.__sti___12_ComBasic_cpp_nrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __sti___12_ComBasic_cpp_nrf &rArr; NRF::NRF(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF::NRF(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> combasic.o(.init_array)
</UL>
<P><STRONG><a name="[38b]"></a>focus_next_core</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lv_group.o(i.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = focus_next_core &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[3ac]"></a>indev_proc_press</STRONG> (Thumb, 1322 bytes, Stack size 56 bytes, lv_indev.o(i.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = indev_proc_press &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_pop_from_inv_buf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_inv_buf_size
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[3b8]"></a>indev_proc_release</STRONG> (Thumb, 1204 bytes, Stack size 48 bytes, lv_indev.o(i.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = indev_proc_release &rArr; lv_group_focus_obj &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_click_focus
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_task
</UL>

<P><STRONG><a name="[3ae]"></a>indev_search_obj</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_indev.o(i.indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = indev_search_obj &rArr;  indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_point_on
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[35e]"></a>delete_children</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lv_obj.o(i.delete_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
</UL>

<P><STRONG><a name="[e0]"></a>lv_obj_design</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_obj_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[df]"></a>lv_obj_signal</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_signal &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[4ef]"></a>refresh_children_position</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_obj.o(i.refresh_children_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = refresh_children_position &rArr;  refresh_children_position (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>

<P><STRONG><a name="[4f0]"></a>refresh_children_style</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(i.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[497]"></a>lv_refr_area_part</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_refr_area_part &rArr; lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_refr_task
</UL>

<P><STRONG><a name="[502]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_refr.o(i.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_in
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[504]"></a>lv_refr_obj</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, lv_refr.o(i.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[503]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, lv_refr.o(i.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_intersect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[49f]"></a>lv_color_mix</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, lv_draw_basic.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
</UL>

<P><STRONG><a name="[4ae]"></a>lv_color_mix</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, lv_draw_rect.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
</UL>

<P><STRONG><a name="[49a]"></a>lv_draw_cont_radius_corr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_cont_radius_corr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_cont_radius_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_main_corner
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_border_corner
</UL>

<P><STRONG><a name="[4b0]"></a>lv_draw_rect_border_corner</STRONG> (Thumb, 3062 bytes, Stack size 216 bytes, lv_draw_rect.o(i.lv_draw_rect_border_corner), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_aa_get_opa
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>

<P><STRONG><a name="[4af]"></a>lv_draw_rect_main_corner</STRONG> (Thumb, 2320 bytes, Stack size 264 bytes, lv_draw_rect.o(i.lv_draw_rect_main_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = lv_draw_rect_main_corner &rArr; lv_draw_fill &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_cont
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_aa_get_opa
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[4aa]"></a>lv_draw_shadow_full</STRONG> (Thumb, 1234 bytes, Stack size 208 bytes, lv_draw_rect.o(i.lv_draw_shadow_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_next
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_init
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_circ_cont
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_cont_radius_corr
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_antialiasing
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_fill
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_px
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_get_buf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_disp_refreshing
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[3a0]"></a>get_glyph_dsc_id</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_glyph_dsc_id &rArr; lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[cd]"></a>kern_pair_16_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[ce]"></a>kern_pair_8_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[af]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[c8]"></a>anim_task</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, lv_anim.o(i.anim_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = anim_task &rArr; lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_rem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(i.lv_anim_core_init)
</UL>
<P><STRONG><a name="[20]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_unicode_to_utf8))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>lv_txt_utf8_next</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, lv_txt.o(i.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>lv_txt_utf8_size</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[3c0]"></a>invalidate_button_area</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lv_btnm.o(i.invalidate_button_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = invalidate_button_area &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_btn_ctrl
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_clear_btn_ctrl_all
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_clear_btn_ctrl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
</UL>

<P><STRONG><a name="[ca]"></a>lv_btnm_design</STRONG> (Thumb, 668 bytes, Stack size 192 bytes, lv_btnm.o(i.lv_btnm_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = lv_btnm_design &rArr; lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnm.o(i.lv_btnm_create)
</UL>
<P><STRONG><a name="[c9]"></a>lv_btnm_signal</STRONG> (Thumb, 1604 bytes, Stack size 64 bytes, lv_btnm.o(i.lv_btnm_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_btnm_signal &rArr; lv_btnm_set_map &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_is_point_on
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_style
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnm.o(i.lv_btnm_create)
</UL>
<P><STRONG><a name="[487]"></a>lv_cont_refr_autofit</STRONG> (Thumb, 664 bytes, Stack size 64 bytes, lv_cont.o(i.lv_cont_refr_autofit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_cont_refr_autofit &rArr; lv_obj_realign &rArr; lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_auto_realign
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_is_empty
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[48b]"></a>lv_cont_refr_layout</STRONG> (Thumb, 1388 bytes, Stack size 48 bytes, lv_cont.o(i.lv_cont_refr_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_cont_refr_layout &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_protect
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_tail
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_prev
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_next
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[cb]"></a>lv_cont_signal</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_cont_signal &rArr; lv_cont_refr_autofit &rArr; lv_obj_realign &rArr; lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cont.o(i.lv_cont_create)
</UL>
<P><STRONG><a name="[d8]"></a>lv_kb_signal</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lv_kb.o(i.lv_kb_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_kb_signal &rArr; lv_ta_set_cursor_type &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_cursor_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_kb.o(i.lv_kb_create)
</UL>
<P><STRONG><a name="[da]"></a>lv_label_design</STRONG> (Thumb, 526 bytes, Stack size 96 bytes, lv_label.o(i.lv_label_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lv_label_design &rArr; lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[4d8]"></a>lv_label_refr_text</STRONG> (Thumb, 954 bytes, Stack size 88 bytes, lv_label.o(i.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[4d7]"></a>lv_label_revert_dots</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_label_revert_dots &rArr; lv_mem_free &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[dd]"></a>lv_label_set_offset_x</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_set_offset_x &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
<LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[de]"></a>lv_label_set_offset_y</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_set_offset_y &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
<LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[db]"></a>lv_label_signal</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_label_signal &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[e6]"></a>edge_flash_anim</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_page.o(i.edge_flash_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = edge_flash_anim &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_start_edge_flash)
</UL>
<P><STRONG><a name="[e7]"></a>edge_flash_anim_end</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_page.o(i.edge_flash_anim_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = edge_flash_anim_end &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_start_edge_flash)
</UL>
<P><STRONG><a name="[e3]"></a>lv_page_design</STRONG> (Thumb, 558 bytes, Stack size 176 bytes, lv_page.o(i.lv_page_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = lv_page_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[4f3]"></a>lv_page_sb_refresh</STRONG> (Thumb, 882 bytes, Stack size 64 bytes, lv_page.o(i.lv_page_sb_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lv_page_sb_refresh &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_is_dragging
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_style
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_set_sb_mode
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
</UL>

<P><STRONG><a name="[e1]"></a>lv_page_scrollable_signal</STRONG> (Thumb, 1088 bytes, Stack size 144 bytes, lv_page.o(i.lv_page_scrollable_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_page_scrollable_signal &rArr; lv_page_start_edge_flash &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_is_dragging
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_start_edge_flash
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[e2]"></a>lv_page_signal</STRONG> (Thumb, 744 bytes, Stack size 72 bytes, lv_page.o(i.lv_page_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_page_signal &rArr; lv_page_scroll_ver &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_top
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_fit_left
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_style
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[e4]"></a>lv_scrl_design</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lv_page.o(i.lv_scrl_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_scrl_design &rArr; lv_obj_get_style &rArr; lv_group_mod_style &rArr; lv_style_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[e5]"></a>scrl_def_event_cb</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_page.o(i.scrl_def_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scrl_def_event_cb &rArr; lv_event_send &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_data
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_page.o(i.lv_page_create)
</UL>
<P><STRONG><a name="[ef]"></a>cursor_blink_anim</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lv_ta.o(i.cursor_blink_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cursor_blink_anim &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_ta.o(i.lv_ta_create)
<LI> lv_ta.o(i.lv_ta_set_cursor_pos)
</UL>
<P><STRONG><a name="[ed]"></a>lv_ta_design</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_ta.o(i.lv_ta_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_design
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[ee]"></a>lv_ta_scrollable_design</STRONG> (Thumb, 442 bytes, Stack size 136 bytes, lv_ta.o(i.lv_ta_scrollable_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lv_ta_scrollable_design &rArr; lv_draw_label &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_draw_get_buf &rArr; lv_mem_realloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_opa_scale
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[ec]"></a>lv_ta_scrollable_signal</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, lv_ta.o(i.lv_ta_scrollable_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_ta_scrollable_signal &rArr; lv_ta_set_cursor_pos &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[eb]"></a>lv_ta_signal</STRONG> (Thumb, 1220 bytes, Stack size 48 bytes, lv_ta.o(i.lv_ta_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lv_ta_signal &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_ta.o(i.lv_ta_create)
</UL>
<P><STRONG><a name="[505]"></a>placeholder_update</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_ta.o(i.placeholder_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = placeholder_update &rArr; lv_obj_set_width &rArr; lv_obj_set_size &rArr; lv_obj_align_origo &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_hidden
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_fit_width
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
</UL>

<P><STRONG><a name="[e8]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_ta.o(i.pwd_char_hider_anim))
<BR>[Address Reference Count : 3]<UL><LI> lv_ta.o(i.lv_ta_add_char)
<LI> lv_ta.o(i.lv_ta_add_text)
<LI> lv_ta.o(i.lv_ta_set_text)
</UL>
<P><STRONG><a name="[e9]"></a>pwd_char_hider_anim_ready</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_ta.o(i.pwd_char_hider_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pwd_char_hider_anim_ready &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_ta.o(i.lv_ta_add_char)
<LI> lv_ta.o(i.lv_ta_add_text)
<LI> lv_ta.o(i.lv_ta_set_text)
</UL>
<P><STRONG><a name="[508]"></a>refr_cursor_area</STRONG> (Thumb, 816 bytes, Stack size 160 bytes, lv_ta.o(i.refr_cursor_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_type
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_style
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_one_line
</UL>

<P><STRONG><a name="[f2]"></a>lv_tabview_signal</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, lv_tabview.o(i.lv_tabview_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_tabview_signal &rArr; tabview_realign &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_data
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(i.lv_tabview_create)
</UL>
<P><STRONG><a name="[f3]"></a>tab_btnm_event_cb</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_tabview.o(i.tab_btnm_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tab_btnm_event_cb &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_btn_ctrl
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_active_btn
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_clear_btn_ctrl_all
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(i.lv_tabview_create)
</UL>
<P><STRONG><a name="[537]"></a>tabpage_press_lost_handler</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, lv_tabview.o(i.tabpage_press_lost_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tabpage_press_lost_handler &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_drag
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
</UL>

<P><STRONG><a name="[538]"></a>tabpage_pressing_handler</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, lv_tabview.o(i.tabpage_pressing_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tabpage_pressing_handler &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area &rArr; lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_drag
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_get_scrl
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_on_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
</UL>

<P><STRONG><a name="[f1]"></a>tabpage_scrl_signal</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lv_tabview.o(i.tabpage_scrl_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tabpage_scrl_signal &rArr; tabpage_press_lost_handler &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(i.lv_tabview_add_tab)
</UL>
<P><STRONG><a name="[f0]"></a>tabpage_signal</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_tabview.o(i.tabpage_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tabpage_signal &rArr; tabpage_press_lost_handler &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_tabview.o(i.tabview_realign)
<LI> lv_tabview.o(i.lv_tabview_add_tab)
</UL>
<P><STRONG><a name="[509]"></a>tabview_realign</STRONG> (Thumb, 1090 bytes, Stack size 40 bytes, lv_tabview.o(i.tabview_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tabview_realign &rArr; lv_tabview_set_tab_act &rArr; lv_anim_create &rArr; lv_ll_ins_head &rArr; lv_mem_alloc &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_hidden
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_get_style
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_style
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
</UL>

<P><STRONG><a name="[1f0]"></a>ShowCrashReports(const char*)</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, displaybasic.o(i._Z16ShowCrashReportsPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ShowCrashReports(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height() const
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setFont(const GFXfont*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextColor(unsigned short)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextSize(unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::setCursor(short, short)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>__sti___16_DisplayBasic_cpp_screen</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, displaybasic.o(i.__sti___16_DisplayBasic_cpp_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sti___16_DisplayBasic_cpp_screen &rArr; TFT_ILI9488::TFT_ILI9488(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::TFT_ILI9488(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaybasic.o(.init_array)
</UL>
<P><STRONG><a name="[8d]"></a>my_disp_flush(_disp_drv_t*, const lv_area_t*, lv_color16_t*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_user.o(i._Z13my_disp_flushP11_disp_drv_tPK9lv_area_tP12lv_color16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = my_disp_flush(_disp_drv_t*, const lv_area_t*, lv_color16_t*) &rArr; TFT_ILI9488::fastDrawRGBBitmap(short, short, unsigned short*, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_ILI9488::fastDrawRGBBitmap(short, short, unsigned short*, short, short)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user.o(i._Z12lv_user_initv)
</UL>
<P><STRONG><a name="[9c]"></a>fs_dir_open(_lv_fs_drv_t*, void*, const char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_user_fs.o(i._Z11fs_dir_openP12_lv_fs_drv_tPvPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fs_dir_open(_lv_fs_drv_t*, void*, const char*) &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[9d]"></a>fs_dir_read(_lv_fs_drv_t*, void*, char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_user_fs.o(i._Z11fs_dir_readP12_lv_fs_drv_tPvPc))
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[9b]"></a>fs_dir_close(_lv_fs_drv_t*, void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_user_fs.o(i._Z12fs_dir_closeP12_lv_fs_drv_tPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_dir_close(_lv_fs_drv_t*, void*) &rArr; FatFile::close() &rArr; FatFile::sync() &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[96]"></a>fs_free(_lv_fs_drv_t*, unsigned*, unsigned*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_user_fs.o(i._Z7fs_freeP12_lv_fs_drv_tPjS1_))
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[90]"></a>fs_open(_lv_fs_drv_t*, void*, const char*, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, lv_user_fs.o(i._Z7fs_openP12_lv_fs_drv_tPvPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fs_open(_lv_fs_drv_t*, void*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[92]"></a>fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*)</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, lv_user_fs.o(i._Z7fs_readP12_lv_fs_drv_tPvS1_jPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[94]"></a>fs_seek(_lv_fs_drv_t*, void*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, lv_user_fs.o(i._Z7fs_seekP12_lv_fs_drv_tPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fs_seek(_lv_fs_drv_t*, void*, unsigned) &rArr; FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[97]"></a>fs_size(_lv_fs_drv_t*, void*, unsigned*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_user_fs.o(i._Z7fs_sizeP12_lv_fs_drv_tPvPj))
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[95]"></a>fs_tell(_lv_fs_drv_t*, void*, unsigned*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_user_fs.o(i._Z7fs_tellP12_lv_fs_drv_tPvPj))
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[91]"></a>fs_close(_lv_fs_drv_t*, void*)</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, lv_user_fs.o(i._Z8fs_closeP12_lv_fs_drv_tPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fs_close(_lv_fs_drv_t*, void*) &rArr; FatFile::close() &rArr; FatFile::sync() &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[9a]"></a>fs_trunc(_lv_fs_drv_t*, void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_user_fs.o(i._Z8fs_truncP12_lv_fs_drv_tPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_trunc(_lv_fs_drv_t*, void*) &rArr; FatFile::sync() &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[93]"></a>fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*)</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, lv_user_fs.o(i._Z8fs_writeP12_lv_fs_drv_tPvPKvjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*) &rArr; FatFile::write(const void*, unsigned) &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[98]"></a>fs_remove(_lv_fs_drv_t*, const char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_user_fs.o(i._Z9fs_removeP12_lv_fs_drv_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fs_remove(_lv_fs_drv_t*, const char*) &rArr; FatFile::remove(FatFile*, const char*) &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::remove(FatFile*, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[99]"></a>fs_rename(_lv_fs_drv_t*, const char*, const char*)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, lv_user_fs.o(i._Z9fs_renameP12_lv_fs_drv_tPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = fs_rename(_lv_fs_drv_t*, const char*, const char*) &rArr; FatFile::rename(FatFile*, const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatCache::sync()
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rename(FatFile*, const char*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(i._Z15lv_user_fs_initv)
</UL>
<P><STRONG><a name="[1a5]"></a>__sti___14_lv_user_fs_cpp_5975bf6a</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lv_user_fs.o(i.__sti___14_lv_user_fs_cpp_5975bf6a))
<BR>[Address Reference Count : 1]<UL><LI> lv_user_fs.o(.init_array)
</UL>
<P><STRONG><a name="[a1]"></a>kb_hide_anim_end(_lv_anim_t*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, page_luascript.o(i._Z16kb_hide_anim_endP10_lv_anim_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = kb_hide_anim_end(_lv_anim_t*) &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th)
</UL>
<P><STRONG><a name="[a3]"></a>keyboard_event_cb(_lv_obj_t*, unsigned char)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, page_luascript.o(i._Z17keyboard_event_cbP9_lv_obj_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = keyboard_event_cb(_lv_obj_t*, unsigned char) &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_ta_add_text &rArr;  lv_ta_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_get_text
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_text
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_event_cb
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::end()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScript::registerStrOutput(void(*)(const char*))
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuaScriptStart(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th)
</UL>
<P><STRONG><a name="[a2]"></a>text_area_event_handler(_lv_obj_t*, unsigned char)</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, page_luascript.o(i._Z23text_area_event_handlerP9_lv_obj_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = text_area_event_handler(_lv_obj_t*, unsigned char) &rArr; lv_kb_set_ta &rArr; lv_ta_set_cursor_type &rArr; refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height_fit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_create
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_set_ta
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_set_style
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_luascript.o(i._Z19PageCreat_LuaScriptv)
</UL>
<P><STRONG><a name="[a7]"></a>breakCallback(lua_State*, lua_Debug*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, luascript.o(i._Z13breakCallbackP9lua_StateP9lua_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = breakCallback(lua_State*, lua_Debug*) &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Address Reference Count : 2]<UL><LI> luascript.o(i._ZN9LuaScript3endEv)
<LI> luascript.o(i._ZN9LuaScriptD1Ev)
</UL>
<P><STRONG><a name="[1a6]"></a>__sti___13_LuaScript_cpp_c2241cb2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, luascript.o(i.__sti___13_LuaScript_cpp_c2241cb2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___13_LuaScript_cpp_c2241cb2 &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luascript.o(.init_array)
</UL>
<P><STRONG><a name="[8b]"></a>Lua_micros(lua_State*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, luatime.o(i._Z10Lua_microsP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lua_micros(lua_State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luatime.o(i._Z11LuaReg_Timev)
</UL>
<P><STRONG><a name="[8a]"></a>Lua_millis(lua_State*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, luatime.o(i._Z10Lua_millisP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lua_millis(lua_State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luatime.o(i._Z11LuaReg_Timev)
</UL>
<P><STRONG><a name="[8c]"></a>Lua_delay(lua_State*)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, luatime.o(i._Z9Lua_delayP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = Lua_delay(lua_State*) &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luatime.o(i._Z11LuaReg_Timev)
</UL>
<P><STRONG><a name="[84]"></a>Lua_pinMode(lua_State*)</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, luagpio.o(i._Z11Lua_pinModeP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = Lua_pinMode(lua_State*) &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::equals(const char*) const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::toUpperCase()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luagpio.o(i._Z11LuaReg_GPIOv)
</UL>
<P><STRONG><a name="[85]"></a>Lua_togglePin(lua_State*)</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, luagpio.o(i._Z13Lua_togglePinP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = Lua_togglePin(lua_State*) &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luagpio.o(i._Z11LuaReg_GPIOv)
</UL>
<P><STRONG><a name="[89]"></a>Lua_analogRead(lua_State*)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, luagpio.o(i._Z14Lua_analogReadP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = Lua_analogRead(lua_State*) &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luagpio.o(i._Z11LuaReg_GPIOv)
</UL>
<P><STRONG><a name="[88]"></a>Lua_analogWrite(lua_State*)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, luagpio.o(i._Z15Lua_analogWriteP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = Lua_analogWrite(lua_State*) &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luagpio.o(i._Z11LuaReg_GPIOv)
</UL>
<P><STRONG><a name="[87]"></a>Lua_digitalRead(lua_State*)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, luagpio.o(i._Z15Lua_digitalReadP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = Lua_digitalRead(lua_State*) &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luagpio.o(i._Z11LuaReg_GPIOv)
</UL>
<P><STRONG><a name="[86]"></a>Lua_digitalWrite(lua_State*)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, luagpio.o(i._Z16Lua_digitalWriteP9lua_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = Lua_digitalWrite(lua_State*) &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> luagpio.o(i._Z11LuaReg_GPIOv)
</UL>
<P><STRONG><a name="[f5]"></a>prvTaskExitError</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[527]"></a>prvUnlockQueue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[518]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[f7]"></a>prvIdleTask</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[51e]"></a>prvSampleTimeNow</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[f8]"></a>prvTimerTask</STRONG> (Thumb, 748 bytes, Stack size 48 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[c4]"></a>f_call</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lapi.o(i.f_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = f_call &rArr; luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_pcallk)
</UL>
<P><STRONG><a name="[c2]"></a>growstack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = growstack &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_checkstack)
</UL>
<P><STRONG><a name="[459]"></a>index2addr</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lapi.o(i.index2addr))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[c1]"></a>boxgc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lauxlib.o(i.boxgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = boxgc &rArr; lua_touserdata
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_prepbuffsize)
</UL>
<P><STRONG><a name="[383]"></a>findfield</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lauxlib.o(i.findfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + In Cycle
<LI>Call Chain = findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[be]"></a>getF</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lauxlib.o(i.getF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getF &rArr; fread
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadfilex)
</UL>
<P><STRONG><a name="[bd]"></a>getS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lauxlib.o(i.getS))
<BR>[Address Reference Count : 2]<UL><LI> lauxlib.o(i.luaL_loadbufferx)
<LI> lauxlib.o(i.luaL_loadstring)
</UL>
<P><STRONG><a name="[bf]"></a>l_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lauxlib.o(i.l_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l_alloc &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[c0]"></a>panic</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lauxlib.o(i.panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = panic &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[427]"></a>pushglobalfuncname</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, lauxlib.o(i.pushglobalfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = pushglobalfuncname &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[438]"></a>resizebox</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lauxlib.o(i.resizebox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + In Cycle
<LI>Call Chain = resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[42a]"></a>tag_error</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lauxlib.o(i.tag_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[b6]"></a>dofilecont</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lbaselib.o(i.dofilecont))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dofilecont
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_dofile)
</UL>
<P><STRONG><a name="[ba]"></a>finishpcall</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lbaselib.o(i.finishpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finishpcall &rArr; lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pcall)
<LI> lbaselib.o(i.luaB_xpcall)
</UL>
<P><STRONG><a name="[b8]"></a>generic_reader</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lbaselib.o(i.generic_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_load)
</UL>
<P><STRONG><a name="[b7]"></a>ipairsaux</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lbaselib.o(i.ipairsaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_ipairs)
</UL>
<P><STRONG><a name="[f9]"></a>luaB_assert</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaB_assert &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>luaB_collectgarbage</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_collectgarbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaB_collectgarbage &rArr; luaL_checkoption &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>luaB_dofile</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_dofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = luaB_dofile &rArr; luaL_loadfilex &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>luaB_error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>luaB_getmetatable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>luaB_ipairs</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_ipairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = luaB_ipairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>luaB_load</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>luaB_loadfile</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = luaB_loadfile &rArr; luaL_loadfilex &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>luaB_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pairs)
<LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>luaB_pairs</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_pairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaB_pairs &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>luaB_pcall</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>luaB_print</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaB_print &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_string_print
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>luaB_rawequal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>luaB_rawget</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>luaB_rawlen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = luaB_rawlen &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>luaB_rawset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>luaB_select</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>luaB_setmetatable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>luaB_tonumber</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, lbaselib.o(i.luaB_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaB_tonumber &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>luaB_tostring</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>luaB_type</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = luaB_type &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>luaB_xpcall</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_xpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaB_xpcall &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[2f0]"></a>addk</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lcode.o(i.addk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[328]"></a>codeexpval</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, lcode.o(i.codeexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = codeexpval &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[365]"></a>discharge2reg</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, lcode.o(i.discharge2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[36d]"></a>exp2reg</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, lcode.o(i.exp2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>

<P><STRONG><a name="[3c7]"></a>jumponcond</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, lcode.o(i.jumponcond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = jumponcond &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
</UL>

<P><STRONG><a name="[32d]"></a>luaK_code</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lcode.o(i.luaK_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeexpval
</UL>

<P><STRONG><a name="[36f]"></a>patchlistaux</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lcode.o(i.patchlistaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = patchlistaux &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[b5]"></a>luaB_auxwrap</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_auxwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaB_auxwrap &rArr; luaL_where &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(i.luaB_cowrap)
</UL>
<P><STRONG><a name="[10e]"></a>luaB_cocreate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_cocreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>luaB_coresume</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_coresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = luaB_coresume &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>luaB_corunning</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_corunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaB_corunning
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>luaB_costatus</STRONG> (Thumb, 110 bytes, Stack size 112 bytes, lcorolib.o(i.luaB_costatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaB_costatus &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>luaB_cowrap</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_cowrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaB_cowrap &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>luaB_yield</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = luaB_yield &rArr; lua_yieldk &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>luaB_yieldable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_yieldable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaB_yieldable
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isyieldable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>db_debug</STRONG> (Thumb, 130 bytes, Stack size 272 bytes, ldblib.o(i.db_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = db_debug &rArr; lua_tolstring &rArr; luaO_tostring &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>db_gethook</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ldblib.o(i.db_gethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = db_gethook &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookmask
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookcount
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>db_getinfo</STRONG> (Thumb, 624 bytes, Stack size 120 bytes, ldblib.o(i.db_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = db_getinfo &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>db_getlocal</STRONG> (Thumb, 202 bytes, Stack size 120 bytes, ldblib.o(i.db_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = db_getlocal &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>db_getmetatable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ldblib.o(i.db_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = db_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>db_getregistry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ldblib.o(i.db_getregistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = db_getregistry &rArr; lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>db_getupvalue</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ldblib.o(i.db_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = db_getupvalue &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>db_getuservalue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ldblib.o(i.db_getuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = db_getuservalue &rArr; lua_type
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>db_sethook</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, ldblib.o(i.db_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = db_sethook &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>db_setlocal</STRONG> (Thumb, 174 bytes, Stack size 128 bytes, ldblib.o(i.db_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = db_setlocal &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>db_setmetatable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ldblib.o(i.db_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = db_setmetatable &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>db_setupvalue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ldblib.o(i.db_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = db_setupvalue &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>db_setuservalue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldblib.o(i.db_setuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = db_setuservalue &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>db_traceback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ldblib.o(i.db_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = db_traceback &rArr; luaL_traceback &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>db_upvalueid</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ldblib.o(i.db_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = db_upvalueid &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>db_upvaluejoin</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ldblib.o(i.db_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = db_upvaluejoin &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>hookf</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ldblib.o(i.hookf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = hookf &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ldblib.o(i.db_sethook)
<LI> ldblib.o(i.db_gethook)
</UL>
<P><STRONG><a name="[3a4]"></a>getobjname</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, ldebug.o(i.getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[406]"></a>varinfo</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ldebug.o(i.varinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = varinfo &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
</UL>

<P><STRONG><a name="[bc]"></a>f_parser</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ldo.o(i.f_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = f_parser &rArr; luaY_parser &rArr; statlist &rArr; statement &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.luaD_protectedparser)
</UL>
<P><STRONG><a name="[c5]"></a>resume</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ldo.o(i.resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = resume &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[c6]"></a>unroll</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, ldo.o(i.unroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = unroll &rArr; luaV_finishOp &rArr; luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[1e3]"></a>DumpFunction</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, ldump.o(i.DumpFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpFunction &rArr; DumpString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
</UL>

<P><STRONG><a name="[1e5]"></a>DumpProtos</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ldump.o(i.DumpProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = DumpProtos &rArr;  DumpFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[1e4]"></a>DumpString</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ldump.o(i.DumpString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DumpString
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[323]"></a>clearvalues</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lgc.o(i.clearvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = clearvalues &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[335]"></a>convergeephemerons</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, lgc.o(i.convergeephemerons))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = convergeephemerons &rArr; propagatemark &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[bb]"></a>dothecall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lgc.o(i.dothecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = dothecall &rArr; luaD_callnoyield &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lgc.o(i.luaC_freeallobjects)
<LI> lgc.o(i.runafewfinalizers)
</UL>
<P><STRONG><a name="[336]"></a>propagatemark</STRONG> (Thumb, 1140 bytes, Stack size 40 bytes, lgc.o(i.propagatemark))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = propagatemark &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
</UL>

<P><STRONG><a name="[324]"></a>reallymarkobject</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, lgc.o(i.reallymarkobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
</UL>

<P><STRONG><a name="[3ea]"></a>runafewfinalizers</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, lgc.o(i.runafewfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = runafewfinalizers &rArr; luaD_pcall &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[3e7]"></a>singlestep</STRONG> (Thumb, 1210 bytes, Stack size 48 bytes, lgc.o(i.singlestep))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = singlestep &rArr;  luaS_resize (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_clearcache
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[3e2]"></a>sweeplist</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, lgc.o(i.sweeplist))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + In Cycle
<LI>Call Chain = sweeplist &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_remove
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[517]"></a>traverseephemeron</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, lgc.o(i.traverseephemeron))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = traverseephemeron &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[13a]"></a>f_flush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, liolib.o(i.f_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = f_flush &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>f_gc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, liolib.o(i.f_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = f_gc &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>f_lines</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, liolib.o(i.f_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = f_lines &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>f_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, liolib.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 43216<LI>Call Chain = f_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>f_seek</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, liolib.o(i.f_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = f_seek &rArr; luaL_checkoption &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>f_setvbuf</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, liolib.o(i.f_setvbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = f_setvbuf &rArr; luaL_checkoption &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>f_tostring</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, liolib.o(i.f_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = f_tostring &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>f_write</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, liolib.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = f_write &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[37d]"></a>g_read</STRONG> (Thumb, 1356 bytes, Stack size 33328 bytes, liolib.o(i.g_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 43200<LI>Call Chain = g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[12f]"></a>io_close</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, liolib.o(i.io_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = io_close &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>io_fclose</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, liolib.o(i.io_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = io_fclose &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 5]<UL><LI> liolib.o(i.io_input)
<LI> liolib.o(i.io_lines)
<LI> liolib.o(i.io_open)
<LI> liolib.o(i.io_output)
<LI> liolib.o(i.io_tmpfile)
</UL>
<P><STRONG><a name="[130]"></a>io_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, liolib.o(i.io_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = io_flush &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>io_input</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, liolib.o(i.io_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = io_input &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>io_lines</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, liolib.o(i.io_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = io_lines &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>io_noclose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, liolib.o(i.io_noclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = io_noclose &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 2]<UL><LI> liolib.o(i.io_noclose)
<LI> liolib.o(i.luaopen_io)
</UL>
<P><STRONG><a name="[133]"></a>io_open</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, liolib.o(i.io_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = io_open &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>io_output</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, liolib.o(i.io_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = io_output &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>io_pclose</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, liolib.o(i.io_pclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = io_pclose &rArr; luaL_checkudata &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.io_popen)
</UL>
<P><STRONG><a name="[135]"></a>io_popen</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, liolib.o(i.io_popen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = io_popen &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>io_read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, liolib.o(i.io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 43216<LI>Call Chain = io_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>io_readline</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, liolib.o(i.io_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 43232<LI>Call Chain = io_readline &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> liolib.o(i.f_lines)
<LI> liolib.o(i.io_lines)
</UL>
<P><STRONG><a name="[137]"></a>io_tmpfile</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, liolib.o(i.io_tmpfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = io_tmpfile &rArr; luaL_fileresult &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>io_type</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, liolib.o(i.io_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = io_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>io_write</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, liolib.o(i.io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = io_write &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[393]"></a>read_line</STRONG> (Thumb, 174 bytes, Stack size 8288 bytes, liolib.o(i.read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 9872<LI>Call Chain = read_line &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[39a]"></a>test2</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, liolib.o(i.test2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test2
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[369]"></a>esccheck</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, llex.o(i.esccheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = esccheck &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3ab]"></a>inclinenumber</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, llex.o(i.inclinenumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = inclinenumber &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[36c]"></a>lexerror</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, llex.o(i.lexerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>

<P><STRONG><a name="[3cd]"></a>llex</STRONG> (Thumb, 2942 bytes, Stack size 48 bytes, llex.o(i.llex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = llex &rArr; read_long_string &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>

<P><STRONG><a name="[3ce]"></a>read_long_string</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, llex.o(i.read_long_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = read_long_string &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3d1]"></a>read_numeral</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, llex.o(i.read_numeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = read_numeral &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[36a]"></a>save</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, llex.o(i.save))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>

<P><STRONG><a name="[142]"></a>math_abs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lmathlib.o(i.math_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_abs &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>math_acos</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_acos &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>math_asin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_asin &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>math_atan</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lmathlib.o(i.math_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = math_atan &rArr; luaL_optnumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>math_ceil</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lmathlib.o(i.math_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_ceil &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>math_cos</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_cos &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>math_deg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmathlib.o(i.math_deg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_deg &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>math_exp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_exp &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>math_floor</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lmathlib.o(i.math_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_floor &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>math_fmod</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lmathlib.o(i.math_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = math_fmod &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>math_log</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lmathlib.o(i.math_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = math_log &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2f
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>math_max</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lmathlib.o(i.math_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = math_max &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>math_min</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lmathlib.o(i.math_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = math_min &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>math_modf</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lmathlib.o(i.math_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = math_modf &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>math_rad</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmathlib.o(i.math_rad))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_rad &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>math_random</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lmathlib.o(i.math_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = math_random &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>math_randomseed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmathlib.o(i.math_randomseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_randomseed &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>math_sin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_sin &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>math_sqrt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lmathlib.o(i.math_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_sqrt &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>math_tan</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = math_tan &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>math_toint</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lmathlib.o(i.math_toint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = math_toint &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>math_type</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lmathlib.o(i.math_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = math_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>math_ult</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lmathlib.o(i.math_ult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = math_ult &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>gctm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loadlib.o(i.gctm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = gctm &rArr; luaL_len &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(i.luaopen_package)
</UL>
<P><STRONG><a name="[159]"></a>ll_loadlib</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, loadlib.o(i.ll_loadlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = ll_loadlib &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>ll_require</STRONG> (Thumb, 352 bytes, Stack size 8280 bytes, loadlib.o(i.ll_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 9952<LI>Call Chain = ll_require &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>ll_searchpath</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, loadlib.o(i.ll_searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 18208<LI>Call Chain = ll_searchpath &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[3ca]"></a>lookforfunc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, loadlib.o(i.lookforfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = lookforfunc &rArr; lua_getfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
</UL>

<P><STRONG><a name="[15e]"></a>searcher_C</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, loadlib.o(i.searcher_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 18216<LI>Call Chain = searcher_C &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>searcher_Croot</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, loadlib.o(i.searcher_Croot))
<BR><BR>[Stack]<UL><LI>Max Depth = 18216<LI>Call Chain = searcher_Croot &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>searcher_Lua</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, loadlib.o(i.searcher_Lua))
<BR><BR>[Stack]<UL><LI>Max Depth = 18216<LI>Call Chain = searcher_Lua &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>searcher_preload</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loadlib.o(i.searcher_preload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = searcher_preload &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[3cc]"></a>searchpath</STRONG> (Thumb, 308 bytes, Stack size 8288 bytes, loadlib.o(i.searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 18184<LI>Call Chain = searchpath &rArr; luaL_gsub &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
</UL>

<P><STRONG><a name="[3a2]"></a>getfield</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, loslib.o(i.getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = getfield &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[160]"></a>os_clock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, loslib.o(i.os_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>os_date</STRONG> (Thumb, 550 bytes, Stack size 8296 bytes, loslib.o(i.os_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 9976<LI>Call Chain = os_date &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>os_difftime</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, loslib.o(i.os_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = os_difftime &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_difftime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>os_execute</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, loslib.o(i.os_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = os_execute &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>os_exit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, loslib.o(i.os_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = os_exit &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>os_getenv</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loslib.o(i.os_getenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = os_getenv &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>os_remove</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loslib.o(i.os_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = os_remove &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>os_rename</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loslib.o(i.os_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = os_rename &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>os_setlocale</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loslib.o(i.os_setlocale))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = os_setlocale &rArr; luaL_checkoption &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>os_time</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, loslib.o(i.os_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = os_time &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>os_tmpname</STRONG> (Thumb, 40 bytes, Stack size 264 bytes, loslib.o(i.os_tmpname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = os_tmpname &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[2f9]"></a>assignment</STRONG> (Thumb, 470 bytes, Stack size 80 bytes, lparser.o(i.assignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + In Cycle
<LI>Call Chain = assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[311]"></a>body</STRONG> (Thumb, 636 bytes, Stack size 144 bytes, lparser.o(i.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + In Cycle
<LI>Call Chain = body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[315]"></a>check_match</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lparser.o(i.check_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = check_match &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[303]"></a>checklimit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lparser.o(i.checklimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = checklimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[317]"></a>close_func</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, lparser.o(i.close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = close_func &rArr; leaveblock &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[32f]"></a>constructor</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, lparser.o(i.constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = constructor &rArr; recfield &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_int2fb
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[2fd]"></a>explist</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lparser.o(i.explist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + In Cycle
<LI>Call Chain = explist &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[332]"></a>expr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lparser.o(i.expr))
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[387]"></a>findgotos</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, lparser.o(i.findgotos))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = findgotos &rArr; luaK_patchlist &rArr; patchlistaux &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[389]"></a>findlabel</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, lparser.o(i.findlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = findlabel &rArr; luaK_patchlist &rArr; patchlistaux &rArr; luaX_syntaxerror &rArr; lexerror &rArr; save &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[38e]"></a>forbody</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, lparser.o(i.forbody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + In Cycle
<LI>Call Chain = forbody &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[326]"></a>leaveblock</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, lparser.o(i.leaveblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = leaveblock &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[313]"></a>new_localvar</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, lparser.o(i.new_localvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = new_localvar &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[458]"></a>newupvalue</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, lparser.o(i.newupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = newupvalue &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[334]"></a>recfield</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, lparser.o(i.recfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = recfield &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[530]"></a>singlevaraux</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, lparser.o(i.singlevaraux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[531]"></a>statement</STRONG> (Thumb, 3102 bytes, Stack size 136 bytes, lparser.o(i.statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + In Cycle
<LI>Call Chain = statement &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[314]"></a>statlist</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lparser.o(i.statlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = statlist &rArr; statement &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[52d]"></a>str_checkname</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lparser.o(i.str_checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = str_checkname &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[370]"></a>subexpr</STRONG> (Thumb, 700 bytes, Stack size 72 bytes, lparser.o(i.subexpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
</UL>

<P><STRONG><a name="[301]"></a>suffixedexp</STRONG> (Thumb, 800 bytes, Stack size 80 bytes, lparser.o(i.suffixedexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = suffixedexp &rArr; constructor &rArr; recfield &rArr; luaK_exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_dischargevars &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[532]"></a>test_then_block</STRONG> (Thumb, 476 bytes, Stack size 88 bytes, lparser.o(i.test_then_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + In Cycle
<LI>Call Chain = test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[c3]"></a>f_luaopen</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lstate.o(i.f_luaopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = f_luaopen &rArr; luaX_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.lua_newstate)
</UL>
<P><STRONG><a name="[45d]"></a>makeseed</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lstate.o(i.makeseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = makeseed &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[3a6]"></a>getoption</STRONG> (Thumb, 628 bytes, Stack size 24 bytes, lstrlib.o(i.getoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = getoption &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[170]"></a>gmatch</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lstrlib.o(i.gmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = gmatch &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>gmatch_aux</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lstrlib.o(i.gmatch_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = gmatch_aux &rArr; push_captures &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.gmatch)
</UL>
<P><STRONG><a name="[3a8]"></a>match</STRONG> (Thumb, 990 bytes, Stack size 32 bytes, lstrlib.o(i.match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + In Cycle
<LI>Call Chain = match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[510]"></a>match_class</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, lstrlib.o(i.match_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[50f]"></a>matchbracketclass</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, lstrlib.o(i.matchbracketclass))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = matchbracketclass
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[511]"></a>max_expand</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lstrlib.o(i.max_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = max_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[3a9]"></a>push_captures</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lstrlib.o(i.push_captures))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = push_captures &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[52a]"></a>push_onecapture</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lstrlib.o(i.push_onecapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = push_onecapture &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[16b]"></a>str_byte</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lstrlib.o(i.str_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = str_byte &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>str_char</STRONG> (Thumb, 92 bytes, Stack size 8288 bytes, lstrlib.o(i.str_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 9968<LI>Call Chain = str_char &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>str_dump</STRONG> (Thumb, 86 bytes, Stack size 8272 bytes, lstrlib.o(i.str_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 9944<LI>Call Chain = str_dump &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>str_find</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(i.str_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = str_find &rArr; str_find_aux &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[534]"></a>str_find_aux</STRONG> (Thumb, 416 bytes, Stack size 336 bytes, lstrlib.o(i.str_find_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = str_find_aux &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_match
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find
</UL>

<P><STRONG><a name="[16f]"></a>str_format</STRONG> (Thumb, 1048 bytes, Stack size 8360 bytes, lstrlib.o(i.str_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 10040<LI>Call Chain = str_format &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>str_gsub</STRONG> (Thumb, 816 bytes, Stack size 8616 bytes, lstrlib.o(i.str_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 10296<LI>Call Chain = str_gsub &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>str_len</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lstrlib.o(i.str_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = str_len &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>str_lower</STRONG> (Thumb, 104 bytes, Stack size 8280 bytes, lstrlib.o(i.str_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 9952<LI>Call Chain = str_lower &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>str_match</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(i.str_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = str_match &rArr; str_find_aux &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>str_pack</STRONG> (Thumb, 1644 bytes, Stack size 8360 bytes, lstrlib.o(i.str_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 10040<LI>Call Chain = str_pack &rArr; luaL_checknumber &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>str_packsize</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, lstrlib.o(i.str_packsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = str_packsize &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>str_rep</STRONG> (Thumb, 194 bytes, Stack size 8288 bytes, lstrlib.o(i.str_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 9968<LI>Call Chain = str_rep &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>str_reverse</STRONG> (Thumb, 110 bytes, Stack size 8272 bytes, lstrlib.o(i.str_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 9944<LI>Call Chain = str_reverse &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>str_sub</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lstrlib.o(i.str_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = str_sub &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>str_unpack</STRONG> (Thumb, 932 bytes, Stack size 128 bytes, lstrlib.o(i.str_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = str_unpack &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>str_upper</STRONG> (Thumb, 104 bytes, Stack size 8280 bytes, lstrlib.o(i.str_upper))
<BR><BR>[Stack]<UL><LI>Max Depth = 9952<LI>Call Chain = str_upper &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>writer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lstrlib.o(i.writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = writer &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.str_dump)
</UL>
<P><STRONG><a name="[411]"></a>mainposition</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, ltable.o(i.mainposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mainposition &rArr; luaS_hashlongstr
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexpf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[307]"></a>auxsort</STRONG> (Thumb, 1004 bytes, Stack size 64 bytes, ltablib.o(i.auxsort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + In Cycle
<LI>Call Chain = auxsort &rArr;  auxsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[320]"></a>checktab</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ltablib.o(i.checktab))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = checktab &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[17e]"></a>pack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ltablib.o(i.pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = pack &rArr; lua_setfield &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>sort</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ltablib.o(i.sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = sort &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>tconcat</STRONG> (Thumb, 250 bytes, Stack size 8288 bytes, ltablib.o(i.tconcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 9968<LI>Call Chain = tconcat &rArr; luaL_optlstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>tinsert</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ltablib.o(i.tinsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = tinsert &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>tmove</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ltablib.o(i.tmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = tmove &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>tremove</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ltablib.o(i.tremove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = tremove &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>unpack</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ltablib.o(i.unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = unpack &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>LoadByte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lundump.o(i.LoadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoadByte &rArr; luaZ_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1f5]"></a>LoadFunction</STRONG> (Thumb, 1030 bytes, Stack size 40 bytes, lundump.o(i.LoadFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = LoadFunction &rArr; LoadString &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[1f7]"></a>LoadInt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lundump.o(i.LoadInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoadInt &rArr; luaZ_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1fa]"></a>LoadProtos</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lundump.o(i.LoadProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + In Cycle
<LI>Call Chain = LoadProtos &rArr;  LoadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[1f6]"></a>LoadString</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, lundump.o(i.LoadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = LoadString &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[183]"></a>byteoffset</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lutf8lib.o(i.byteoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = byteoffset &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>codepoint</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, lutf8lib.o(i.codepoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = codepoint &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>iter_aux</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lutf8lib.o(i.iter_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = iter_aux &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(i.iter_codes)
</UL>
<P><STRONG><a name="[187]"></a>iter_codes</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lutf8lib.o(i.iter_codes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = iter_codes &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>utfchar</STRONG> (Thumb, 140 bytes, Stack size 8280 bytes, lutf8lib.o(i.utfchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 9960<LI>Call Chain = utfchar &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>utflen</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, lutf8lib.o(i.utflen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = utflen &rArr; luaL_optinteger &rArr; tag_error &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaS_resize &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[1b5]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[2ec]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c7]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[2ee]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2ed]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a9]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[aa]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[2ea]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1cd]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[1d7]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

#include "Adafruit_ST7789.h"
#include "SPI.h"

#define TFT_SPI SPI

#if defined(__STM32__)
#define	TFT_RST_SET  	GPIO_HIGH(rstport,rstpinmask)
#define	TFT_CS_SET  	//GPIO_HIGH(csport,cspinmask)
#define	TFT_RS_SET  	GPIO_HIGH(rsport,rspinmask)
#define	TFT_SCK_SET  	GPIO_HIGH(sckport,sckpinmask)
#define	TFT_MOSI_SET  	GPIO_HIGH(mosiport,mosipinmask)

#define	TFT_RST_CLR  	GPIO_LOW(rstport,rstpinmask)
#define	TFT_CS_CLR  	//GPIO_LOW(csport,cspinmask)
#define	TFT_RS_CLR  	GPIO_LOW(rsport,rspinmask)
#define	TFT_SCK_CLR  	GPIO_LOW(sckport,sckpinmask)
#define	TFT_MOSI_CLR  	GPIO_LOW(mosiport,mosipinmask)
#else
#define	TFT_RST_SET  	digitalWrite(RST,HIGH)
#define	TFT_CS_SET  	digitalWrite(CS,HIGH)
#define	TFT_RS_SET  	digitalWrite(RS,HIGH)
#define	TFT_SCK_SET  	digitalWrite(SCK,HIGH)
#define	TFT_MOSI_SET  	digitalWrite(MOSI,HIGH)

#define	TFT_RST_CLR  	digitalWrite(RST,LOW)
#define	TFT_CS_CLR  	digitalWrite(CS,LOW)
#define	TFT_RS_CLR  	digitalWrite(RS,LOW)
#define	TFT_SCK_CLR  	digitalWrite(SCK,LOW)
#define	TFT_MOSI_CLR  	digitalWrite(MOSI,LOW)
#endif


Adafruit_ST7789::Adafruit_ST7789(uint8_t cs, uint8_t rs, uint8_t rst)
    : Adafruit_GFX(ST7789_TFTWIDTH, ST7789_TFTHEIGHT)
{
    RST = rst;
    CS = cs;
    RS = rs;

#if defined(__STM32__)
    rstport = digitalPinToPort(RST);
    rstpinmask = digitalPinToBitMask(RST);
    csport = digitalPinToPort(CS);
    cspinmask = digitalPinToBitMask(CS);
    rsport = digitalPinToPort(RS);
    rspinmask = digitalPinToBitMask(RS);
    sckport = digitalPinToPort(SCK);
    sckpinmask = digitalPinToBitMask(SCK);
    mosiport = digitalPinToPort(MOSI);
    mosipinmask = digitalPinToBitMask(MOSI);
#endif

}

void Adafruit_ST7789::begin()
{
    pinMode(RST, OUTPUT);
    pinMode(CS, OUTPUT);
    pinMode(RS, OUTPUT);

    TFT_SPI.begin();
    TFT_SPI.setClock(8000000);

    TFT_RST_CLR;
    delay(250);
    TFT_RST_SET;
    delay(250);

    //************* Start Initial Sequence **********//

#define USE_HORIZONTAL 0
#define LCD_WR_REG writeCommond
#define LCD_WR_DATA8 writeData
    LCD_WR_REG(0x36);
if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00);
else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0);
else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70);
else LCD_WR_DATA8(0xA0);

LCD_WR_REG(0x3A); 
LCD_WR_DATA8(0x05);

LCD_WR_REG(0xB2);
LCD_WR_DATA8(0x0C);
LCD_WR_DATA8(0x0C);
LCD_WR_DATA8(0x00);
LCD_WR_DATA8(0x33);
LCD_WR_DATA8(0x33); 

LCD_WR_REG(0xB7); 
LCD_WR_DATA8(0x35);  

LCD_WR_REG(0xBB);
LCD_WR_DATA8(0x19);

LCD_WR_REG(0xC0);
LCD_WR_DATA8(0x2C);

LCD_WR_REG(0xC2);
LCD_WR_DATA8(0x01);

LCD_WR_REG(0xC3);
LCD_WR_DATA8(0x12);   

LCD_WR_REG(0xC4);
LCD_WR_DATA8(0x20);  

LCD_WR_REG(0xC6); 
LCD_WR_DATA8(0x0F);    

LCD_WR_REG(0xD0); 
LCD_WR_DATA8(0xA4);
LCD_WR_DATA8(0xA1);

LCD_WR_REG(0xE0);
LCD_WR_DATA8(0xD0);
LCD_WR_DATA8(0x04);
LCD_WR_DATA8(0x0D);
LCD_WR_DATA8(0x11);
LCD_WR_DATA8(0x13);
LCD_WR_DATA8(0x2B);
LCD_WR_DATA8(0x3F);
LCD_WR_DATA8(0x54);
LCD_WR_DATA8(0x4C);
LCD_WR_DATA8(0x18);
LCD_WR_DATA8(0x0D);
LCD_WR_DATA8(0x0B);
LCD_WR_DATA8(0x1F);
LCD_WR_DATA8(0x23);

LCD_WR_REG(0xE1);
LCD_WR_DATA8(0xD0);
LCD_WR_DATA8(0x04);
LCD_WR_DATA8(0x0C);
LCD_WR_DATA8(0x11);
LCD_WR_DATA8(0x13);
LCD_WR_DATA8(0x2C);
LCD_WR_DATA8(0x3F);
LCD_WR_DATA8(0x44);
LCD_WR_DATA8(0x51);
LCD_WR_DATA8(0x2F);
LCD_WR_DATA8(0x1F);
LCD_WR_DATA8(0x1F);
LCD_WR_DATA8(0x20);
LCD_WR_DATA8(0x23);

LCD_WR_REG(0x21); 

LCD_WR_REG(0x11); 
//Delay (120); 

LCD_WR_REG(0x29); 

///**************************/
//	writeCommond(0x11);

//	delay(120);

//	writeCommond(0x36);
//	writeData(0x00);

//	writeCommond(0x3A);
//	writeData(0x55);

//	writeCommond(0x21);

//	writeCommond(0xB2);
//	writeData(0x05);
//	writeData(0x05);
//	writeData(0x00);
//	writeData(0x33);
//	writeData(0x33);

//	writeCommond(0xB7);
//	writeData(0x75);

//	writeCommond(0xBB);
//	writeData(0x22);

//	writeCommond(0xC0);
//	writeData(0x2C);

//	writeCommond(0xC2);
//	writeData(0x01);

//	writeCommond(0xC3);
//	writeData(0x13);

//	writeCommond(0xC4);
//	writeData(0x20);

//	writeCommond(0xC6);
//	writeData(0x11);

//	writeCommond(0xD0);
//	writeData(0xA4);
//	writeData(0xA1);

//	writeCommond(0xD6);
//	writeData(0xA1);

//	writeCommond(0xE0);
//	writeData(0xD0);
//	writeData(0x05);
//	writeData(0x0A);
//	writeData(0x09);
//	writeData(0x08);
//	writeData(0x05);
//	writeData(0x2E);
//	writeData(0x44);
//	writeData(0x45);
//	writeData(0x0F);
//	writeData(0x17);
//	writeData(0x16);
//	writeData(0x2B);
//	writeData(0x33);

//	writeCommond(0xE1);
//	writeData(0xD0);
//	writeData(0x05);
//	writeData(0x0A);
//	writeData(0x09);
//	writeData(0x08);
//	writeData(0x05);
//	writeData(0x2E);
//	writeData(0x43);
//	writeData(0x45);
//	writeData(0x0F);
//	writeData(0x16);
//	writeData(0x16);
//	writeData(0x2B);
//	writeData(0x33);

//	writeCommond(0x29);     //Display on
}

void Adafruit_ST7789::writeCommond(uint8_t cmd)
{
    TFT_CS_CLR;
    TFT_RS_CLR;
    TFT_SPI.transfer(cmd);
    TFT_CS_SET;
}

void Adafruit_ST7789::writeData16(uint16_t data)
{
    TFT_CS_CLR;
    TFT_RS_SET;
    TFT_SPI.transfer(data >> 8);
    TFT_SPI.transfer(data);
    TFT_CS_SET;
}

void Adafruit_ST7789::writeData(uint8_t data)
{
    TFT_CS_CLR;
    TFT_RS_SET;
    TFT_SPI.transfer(data);
    TFT_CS_SET;
}

void Adafruit_ST7789::setRotation(uint8_t r)
{
    return ;
    rotation = r % 4;
    switch(rotation)
    {
    case 0:
        _width = ST7789_TFTWIDTH;
        _height = ST7789_TFTHEIGHT;

        writeCommond(0x36);
        writeData(0x08);
        break;

    case 1:
        _width = ST7789_TFTHEIGHT;
        _height = ST7789_TFTWIDTH;

        writeCommond(0x36);
        writeData(0xA8);
        break;

    case 2:
        _width = ST7789_TFTWIDTH;
        _height = ST7789_TFTHEIGHT;

        writeCommond(0x36);
        writeData(0xC8);
        break;

    case 3:
        _width = ST7789_TFTHEIGHT;
        _height = ST7789_TFTWIDTH;

        writeCommond(0x36);
        writeData(0x68);
        break;

    }
}

void Adafruit_ST7789::setAddrWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
    writeCommond(0x2A);
    writeData16(x0);
    writeData16(x1);

    writeCommond(0x2B);
    writeData16(y0);
    writeData16(y1);

    writeCommond(0x2C);
}

void Adafruit_ST7789::setCursor(int16_t x, int16_t y)
{
    cursor_x = x;
    cursor_y = y;
    if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
    setAddrWindow(x, y, x + 1, y + 1);
}

void Adafruit_ST7789::drawPixel(int16_t x, int16_t y, uint16_t color)
{
    if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
    setAddrWindow(x, y, x + 1, y + 1);
    writeData16(color);
}

void Adafruit_ST7789::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
    // Rudimentary clipping
    if((x >= _width) || (y >= _height) || h < 1) return;
    if((y + h - 1) >= _height) h = _height - y;
    if(x < 0) x = 0;
    if(y < 0) y = 0;

    setAddrWindow(x, y, x, y + h - 1);

    while (h--)
        writeData16(color);
}

void Adafruit_ST7789::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
    // Rudimentary clipping
    if((x >= _width) || (y >= _height) || w < 1) return;
    if((x + w - 1) >= _width)  w = _width - x;
    if(x < 0) x = 0;
    if(y < 0) y = 0;

    setAddrWindow(x, y, x + w - 1, y);

    while (w--)
        writeData16(color);
}

void Adafruit_ST7789::drawRGBBitmap(int16_t x, int16_t y, uint16_t *bitmap, int16_t w, int16_t h) {
    if((x >= _width) || (y >= _height)) return;

    int16_t actual_cursor_x = x;
    int16_t actual_cursor_y = y;
    int16_t actual_cursor_x1 = x + w - 1;
    int16_t actual_cursor_y1 = y + h - 1;

    if(actual_cursor_x < 0)
    {
        actual_cursor_x = 0;
    }
    else if(actual_cursor_x >= _width)
    {
        actual_cursor_x = _width - 1;
    }

    if(actual_cursor_y < 0)
    {
        actual_cursor_y = 0;
    }
    else if(actual_cursor_y >= _height)
    {
        actual_cursor_y = _height - 1;
    }

    if(actual_cursor_x1 < 0)
    {
        actual_cursor_x1 = 0;
    }
    else if(actual_cursor_x1 >= _width)
    {
        actual_cursor_x1 = _width - 1;
    }

    if(actual_cursor_y1 < 0)
    {
        actual_cursor_y1 = 0;
    }
    else if(actual_cursor_y1 >= _height)
    {
        actual_cursor_y1 = _height - 1;
    }

    setAddrWindow(actual_cursor_x, actual_cursor_y, actual_cursor_x1, actual_cursor_y1);

    for(int16_t Y = 0; Y < h; Y++)
    {
        for(int16_t X = 0; X < w; X++)
        {
            int16_t index = X + Y * w;
            int16_t actualX = x + X;
            int16_t actualY = y + Y;
            if(actualX >=0 && actualX < _width && actualY >= 0 && actualY < _height)
            {
                writeData16(bitmap[index]);
            }
        }
    }
}

void Adafruit_ST7789::fillScreen(uint16_t color)
{
    setAddrWindow(0, 0, _width - 1, _height - 1);
    for(uint32_t i = 0; i < (_width * _height); i++)
        writeData16(color);
}

extern "C"
{
#include <stdio.h>
#include <stdarg.h>
}
void Adafruit_ST7789::setOpacityX(uint8_t opacity)
{
    SP_Brush_Opacity = opacity;
}
int Adafruit_ST7789::printfX(const char *fmt, ...) {
    static char TEXT_BUFFER[128];
    va_list  va;
    va_start(va, fmt);
    int ret = vsprintf(TEXT_BUFFER, fmt, va);
    va_end(va);

    SP_PrepareRect(Fonts_MicrosoftYahei11px, (char *)TEXT_BUFFER, 0);
    SP_FillBuffer_SolidBrush(textbgcolor);
    SP_CoverString(Fonts_MicrosoftYahei11px, (char *)TEXT_BUFFER, 0, textcolor);

    drawRGBBitmap(cursor_x, cursor_y, SP_Buffer, SP_Buffer_Width, SP_Buffer_Height);
    cursor_x += SP_Buffer_Width;

    return ret;
}

int Adafruit_ST7789::printfX(String str) {
    char buffer[128];
    str.toCharArray(buffer, str.length() + 1);
    return printfX(buffer);
}

#include "core.h"

//const uint8_t PROGMEM pinBootProgram[] = {
//  // buttons
//  PIN_LEFT_BUTTON, INPUT_PULLUP,
//  PIN_RIGHT_BUTTON, INPUT_PULLUP,
//  PIN_UP_BUTTON, INPUT_PULLUP,
//  PIN_DOWN_BUTTON, INPUT_PULLUP,
//  PIN_A_BUTTON, INPUT_PULLUP,
//  PIN_B_BUTTON, INPUT_PULLUP,
//  0
//};

#define TFT_CS     -1
#define TFT_RST    -1
#define TFT_DC     PB0
#define TFT_MOSI	PB3
#define TFT_CLK		PA8

#define HC165_OUT_Pin		PB4
#define HC165_CP_Pin		PB5
#define HC165_PL_Pin		PB6

ArduboyCore::ArduboyCore()
:Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, TFT_RST)
 {}
	
void ArduboyCore::boot()
{
//  #if F_CPU == 8000000L
//  slowCPU();
//  #endif

//  SPI.begin();
  bootPins();
  bootLCD();

//  #ifdef SAFE_MODE
//  if (buttonsState() == (LEFT_BUTTON | UP_BUTTON))
//    safeMode();
//  #endif

//  saveMuchPower();
}

void ArduboyCore::bootLCD()
{
	Adafruit_ST7735::initR(INITR_MINI128x64);
}

void ArduboyCore::bootPins()
{
//  uint8_t pin, mode;
//  const uint8_t *i = pinBootProgram;

//  while(true) {
//    pin = pgm_read_byte(i++);
//    mode = pgm_read_byte(i++);
//    if (pin==0) break;
//    pinMode(pin, mode);
//  }
	/*HC165引脚初始化*/
    pinMode(HC165_OUT_Pin, INPUT);
    pinMode(HC165_CP_Pin, OUTPUT);
    pinMode(HC165_PL_Pin, OUTPUT);
}

uint8_t ArduboyCore::width() { return WIDTH; }

uint8_t ArduboyCore::height() { return HEIGHT; }

void ArduboyCore::paintScreen(const unsigned char *image)
{
	setAddrWindow(0, 0, _width - 1, _height - 1);

    int16_t byteWidth = (_width + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t b = 0;

    for(int16_t y = 0; y < _height; y++)
    {
        for(int16_t x = 0; x < _width; x++ )
        {
            uint8_t row = (uint8_t)y / 8;
    if(image[(row*WIDTH) + (uint8_t)x] &  _BV((uint8_t)y % 8))
	{
		 pushColor(ST7735_WHITE);
	}
	else
	{
		pushColor(ST7735_BLACK);
	}
        }
    }
	
	

}

// paint from a memory buffer, this should be FAST as it's likely what
// will be used by any buffer based subclass
void ArduboyCore::paintScreen(unsigned char image[])
{
	setAddrWindow(0, 0, _width - 1, _height - 1);

    int16_t byteWidth = (_width + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t b = 0;

    for(int16_t j = 0; j < _height; j++)
    {
        for(int16_t i = 0; i < _width; i++ )
        {
            if(i & 7) b <<= 1;
            else      b   = image[j * byteWidth + i / 8];
            pushColor((b & 0x80) ?ST7735_WHITE :ST7735_BLACK);
        }
    }
}

void ArduboyCore::blank()
{

}

void ArduboyCore::setRGBled(uint8_t red, uint8_t green, uint8_t blue)
{
}

/* Buttons */

uint8_t ArduboyCore::getInput()
{
  return buttonsState();
}

/**
  * @brief  获取HC165的值
  * @param  无
  * @retval 无
  */
static uint8_t Get_HC165_Value()
{
    digitalWrite_HIGH(HC165_CP_Pin);
    digitalWrite_LOW(HC165_PL_Pin);
    digitalWrite_HIGH(HC165_PL_Pin);
    return shiftIn(HC165_OUT_Pin, HC165_CP_Pin, MSBFIRST);
}

uint8_t ArduboyCore::buttonsState()
{
  uint8_t buttons;
  uint8_t ButtonValue = Get_HC165_Value();//获取HC165八个引脚的电平值

	if(bitRead(ButtonValue, 0))
	{
		buttons |= A_BUTTON;
	}
	else
	{
		buttons &= ~A_BUTTON;
	}
	
	if(bitRead(ButtonValue, 3))
	{
		buttons |= B_BUTTON;
	}
	else
	{
		buttons &= ~B_BUTTON;
	}
	
	if(bitRead(ButtonValue, 4))
	{
		buttons |= UP_BUTTON;
	}
	else
	{
		buttons &= ~UP_BUTTON;
	}
	
	if(bitRead(ButtonValue, 7))
	{
		buttons |= DOWN_BUTTON;
	}
	else
	{
		buttons &= ~DOWN_BUTTON;
	}
	
	if(bitRead(ButtonValue, 5))
	{
		buttons |= LEFT_BUTTON;
	}
	else
	{
		buttons &= ~LEFT_BUTTON;
	}
	
	if(bitRead(ButtonValue, 6))
	{
		buttons |= RIGHT_BUTTON;
	}
	else
	{
		buttons &= ~RIGHT_BUTTON;
	}
  
  return buttons;
}

